{
  "tsup.config.ts": [
    "1: import { defineConfig } from 'tsup';",
    "2: ",
    "3: export default defineConfig({",
    "4:   entryPoints: ['src/index.ts', 'src/cli.ts'], // Include cli.ts",
    "5:   format: ['cjs', 'esm'],",
    "6:   dts: true,",
    "7:   outDir: 'dist',",
    "8:   clean: true,",
    "9: });",
    "10: "
  ],
  "tsup.config.js": [
    "1: import { defineConfig } from 'tsup';",
    "2: export default defineConfig({",
    "3:   entryPoints: ['src/index.ts'],",
    "4:   format: ['cjs', 'esm'],",
    "5:   dts: true,",
    "6:   outDir: 'dist',",
    "7:   clean: true,",
    "8: });",
    "9: //# sourceMappingURL=tsup.config.js.map",
    "10: "
  ],
  "tsup.config.d.ts": [
    "1: declare const _default:",
    "2:   | import('tsup').Options",
    "3:   | import('tsup').Options[]",
    "4:   | ((",
    "5:       overrideOptions: import('tsup').Options,",
    "6:     ) =>",
    "7:       | import('tsup').Options",
    "8:       | import('tsup').Options[]",
    "9:       | Promise<import('tsup').Options | import('tsup').Options[]>);",
    "10: export default _default;",
    "11: //# sourceMappingURL=tsup.config.d.ts.map",
    "12: "
  ],
  "src/utils.ts": [
    "1: import { OpenAI } from 'openai';",
    "2: import * as fs from 'fs/promises';",
    "3: import { exec } from 'child_process';",
    "4: import readline from 'readline';",
    "5: import { AxePuppeteer } from '@axe-core/puppeteer';",
    "6: import puppeteer from 'puppeteer';",
    "7: ",
    "8: interface ImproveSemanticsOptions {",
    "9:   htmlFilePath: string;",
    "10:   openAIApiKey: string;",
    "11:   openAIModel?: string;",
    "12:   openVSCode?: boolean;",
    "13: }",
    "14: ",
    "15: //Old Functions",
    "16: async function improveHtmlSemantics({",
    "17:   htmlFilePath,",
    "18:   openAIApiKey,",
    "19:   openAIModel = 'gpt-4o-mini',",
    "20:   openVSCode = true,",
    "21: }: ImproveSemanticsOptions): Promise<string> {",
    "22:   const client = new OpenAI({ apiKey: openAIApiKey });",
    "23: ",
    "24:   try {",
    "25:     const htmlContent = await fs.readFile(htmlFilePath, 'utf8');",
    "26: ",
    "27:     const prompt = `Please make the following HTML more semantic and accessible. Consider using header tags instead of just <p> or using <section>/<article> instead of <div> where appropriate. Do not response with any other words or content EXCEPT for the html code. This is extremely important. The file returned should be runnable as HTML code. E.g. shouldn't include dash tags. The first and final tag should be the first and final tag provided by the original html content e.g. <!doctype html>. Please do not write backticks at the start or end. e.g. backtick backtick backtick html which is commonly used by ai to display code nicely. please dont do this. Here is the HTML content:\\n\\n${htmlContent}`;",
    "28: ",
    "29:     const completion = await client.chat.completions.create({",
    "30:       model: openAIModel,",
    "31:       messages: [",
    "32:         {",
    "33:           role: 'system',",
    "34:           content:",
    "35:             'You are a front-end developer that is an expert in semantic HTML. You are helping a colleague improve the semantic structure of their HTML code to make it more accessible. You are not allowed to change any content or words in the HTML code except for the HTML tags and the attributes of those tags. You can also add new tags or attributes where necessary.',",
    "36:         },",
    "37:         { role: 'user', content: prompt },",
    "38:       ],",
    "39:     });",
    "40: ",
    "41:     const improvedHtml = completion.choices?.[0]?.message?.content || '';",
    "42: ",
    "43:     if (!improvedHtml) {",
    "44:       throw new Error('No improved HTML was returned.');",
    "45:     }",
    "46: ",
    "47:     await fs.writeFile(htmlFilePath, improvedHtml, 'utf8');",
    "48: ",
    "49:     console.log(`The file ${htmlFilePath} has been updated successfully.`);",
    "50: ",
    "51:     if (openVSCode) {",
    "52:       exec(`git difftool ${htmlFilePath}`, (error, stdout, stderr) => {",
    "53:         if (error) {",
    "54:           console.log(",
    "55:             'Failed to open VSCode with git difftool. Make sure git is installed and configured correctly.',",
    "56:           );",
    "57:           return;",
    "58:         }",
    "59:         if (stderr) {",
    "60:           console.log(`stderr: ${stderr}`);",
    "61:           return;",
    "62:         }",
    "63:         console.log(",
    "64:           `Opened working tree changes for ${htmlFilePath} in VSCode.`,",
    "65:         );",
    "66:       });",
    "67:     }",
    "68: ",
    "69:     return improvedHtml;",
    "70:   } catch (error) {",
    "71:     console.error('An error occurred:', error);",
    "72:     throw error;",
    "73:   }",
    "74: }",
    "75: ",
    "76: async function improveSemantics(htmlFilePath: string, openAIApiKey: string) {",
    "77:   try {",
    "78:     const improvedHtml = await improveHtmlSemantics({",
    "79:       htmlFilePath,",
    "80:       openAIApiKey,",
    "81:       openAIModel: 'gpt-4o-mini',",
    "82:       openVSCode: true,",
    "83:     });",
    "84: ",
    "85:     console.log('HTML semantics improved successfully.');",
    "86:   } catch (error) {",
    "87:     console.error('Error improving HTML:', error);",
    "88:   }",
    "89: }",
    "90: ",
    "91: const assessAccessibility = async (flag: boolean) => {",
    "92:   const browser = await puppeteer.launch();",
    "93:   const page = await browser.newPage();",
    "94:   await page.goto(`http://localhost:3000`);",
    "95: ",
    "96:   const results = await new AxePuppeteer(page).analyze();",
    "97: ",
    "98:   let p2 = 0; // Critical and Serious issues",
    "99:   let p1 = 0; // Moderate issues",
    "100:   let p0 = 0; // Minor issues",
    "101: ",
    "102:   results.violations.forEach((violation) => {",
    "103:     violation.nodes.forEach((node) => console.log(node));",
    "104:   });",
    "105: ",
    "106:   // Count issues by impact",
    "107:   results.violations.forEach((violation) => {",
    "108:     switch (violation.impact) {",
    "109:       case 'critical':",
    "110:       case 'serious':",
    "111:         p2 += violation.nodes.length;",
    "112:         break;",
    "113:       case 'moderate':",
    "114:         p1 += violation.nodes.length;",
    "115:         break;",
    "116:       case 'minor':",
    "117:         p0 += violation.nodes.length;",
    "118:         break;",
    "119:     }",
    "120:   });",
    "121: ",
    "122:   // Calculate the raw score",
    "123:   const rawScore = (0.4 * p2 + 0.8 * p1 + p0) / (p1 + p2 + p0);",
    "124: ",
    "125:   // Optionally weight the score",
    "126:   const weightedScore = 500 + rawScore * 500.0;",
    "127:   console.log(`minor: ${p0} | minor: ${p1} | minor: ${p2}`);",
    "128:   console.log(`Raw score: ${rawScore} | Weighted score: ${weightedScore}`);",
    "129: ",
    "130:   const score = {",
    "131:     rawScore,",
    "132:     weightedScore,",
    "133:     serious: p2,",
    "134:     moderate: p1,",
    "135:     minor: p0,",
    "136:   };",
    "137: ",
    "138:   if (flag) {",
    "139:     await fs.writeFile(",
    "140:       'accessibility-results.json',",
    "141:       JSON.stringify(results, null, 2),",
    "142:       'utf8',",
    "143:     );",
    "144: ",
    "145:     await fs.writeFile(",
    "146:       'accessibility-score.json',",
    "147:       JSON.stringify(score, null, 2),",
    "148:       'utf-8',",
    "149:     );",
    "150:   }",
    "151: ",
    "152:   await browser.close();",
    "153: ",
    "154:   const accessibilityResult = { score, results };",
    "155: ",
    "156:   return accessibilityResult;",
    "157: };",
    "158: ",
    "159: // Export functions for use as a module",
    "160: // export { improveSemantics, improveHtmlSemantics, init, assessAccessibility };",
    "161: "
  ],
  "src/utils.test.ts": [
    "1: // import { add } from './utils.js';",
    "2: // import { test, expect } from 'vitest';",
    "3: ",
    "4: // test('add', () => {",
    "5: //   expect(add(1, 2)).toBe(3);",
    "6: // });",
    "7: "
  ],
  "src/utils.js": [
    "1: 'use strict';",
    "2: var __awaiter =",
    "3:   (this && this.__awaiter) ||",
    "4:   function (thisArg, _arguments, P, generator) {",
    "5:     function adopt(value) {",
    "6:       return value instanceof P",
    "7:         ? value",
    "8:         : new P(function (resolve) {",
    "9:             resolve(value);",
    "10:           });",
    "11:     }",
    "12:     return new (P || (P = Promise))(function (resolve, reject) {",
    "13:       function fulfilled(value) {",
    "14:         try {",
    "15:           step(generator.next(value));",
    "16:         } catch (e) {",
    "17:           reject(e);",
    "18:         }",
    "19:       }",
    "20:       function rejected(value) {",
    "21:         try {",
    "22:           step(generator['throw'](value));",
    "23:         } catch (e) {",
    "24:           reject(e);",
    "25:         }",
    "26:       }",
    "27:       function step(result) {",
    "28:         result.done",
    "29:           ? resolve(result.value)",
    "30:           : adopt(result.value).then(fulfilled, rejected);",
    "31:       }",
    "32:       step((generator = generator.apply(thisArg, _arguments || [])).next());",
    "33:     });",
    "34:   };",
    "35: var __generator =",
    "36:   (this && this.__generator) ||",
    "37:   function (thisArg, body) {",
    "38:     var _ = {",
    "39:         label: 0,",
    "40:         sent: function () {",
    "41:           if (t[0] & 1) throw t[1];",
    "42:           return t[1];",
    "43:         },",
    "44:         trys: [],",
    "45:         ops: [],",
    "46:       },",
    "47:       f,",
    "48:       y,",
    "49:       t,",
    "50:       g;",
    "51:     return (",
    "52:       (g = { next: verb(0), throw: verb(1), return: verb(2) }),",
    "53:       typeof Symbol === 'function' &&",
    "54:         (g[Symbol.iterator] = function () {",
    "55:           return this;",
    "56:         }),",
    "57:       g",
    "58:     );",
    "59:     function verb(n) {",
    "60:       return function (v) {",
    "61:         return step([n, v]);",
    "62:       };",
    "63:     }",
    "64:     function step(op) {",
    "65:       if (f) throw new TypeError('Generator is already executing.');",
    "66:       while ((g && ((g = 0), op[0] && (_ = 0)), _))",
    "67:         try {",
    "68:           if (",
    "69:             ((f = 1),",
    "70:             y &&",
    "71:               (t =",
    "72:                 op[0] & 2",
    "73:                   ? y['return']",
    "74:                   : op[0]",
    "75:                     ? y['throw'] || ((t = y['return']) && t.call(y), 0)",
    "76:                     : y.next) &&",
    "77:               !(t = t.call(y, op[1])).done)",
    "78:           )",
    "79:             return t;",
    "80:           if (((y = 0), t)) op = [op[0] & 2, t.value];",
    "81:           switch (op[0]) {",
    "82:             case 0:",
    "83:             case 1:",
    "84:               t = op;",
    "85:               break;",
    "86:             case 4:",
    "87:               _.label++;",
    "88:               return { value: op[1], done: false };",
    "89:             case 5:",
    "90:               _.label++;",
    "91:               y = op[1];",
    "92:               op = [0];",
    "93:               continue;",
    "94:             case 7:",
    "95:               op = _.ops.pop();",
    "96:               _.trys.pop();",
    "97:               continue;",
    "98:             default:",
    "99:               if (",
    "100:                 !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&",
    "101:                 (op[0] === 6 || op[0] === 2)",
    "102:               ) {",
    "103:                 _ = 0;",
    "104:                 continue;",
    "105:               }",
    "106:               if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {",
    "107:                 _.label = op[1];",
    "108:                 break;",
    "109:               }",
    "110:               if (op[0] === 6 && _.label < t[1]) {",
    "111:                 _.label = t[1];",
    "112:                 t = op;",
    "113:                 break;",
    "114:               }",
    "115:               if (t && _.label < t[2]) {",
    "116:                 _.label = t[2];",
    "117:                 _.ops.push(op);",
    "118:                 break;",
    "119:               }",
    "120:               if (t[2]) _.ops.pop();",
    "121:               _.trys.pop();",
    "122:               continue;",
    "123:           }",
    "124:           op = body.call(thisArg, _);",
    "125:         } catch (e) {",
    "126:           op = [6, e];",
    "127:           y = 0;",
    "128:         } finally {",
    "129:           f = t = 0;",
    "130:         }",
    "131:       if (op[0] & 5) throw op[1];",
    "132:       return { value: op[0] ? op[1] : void 0, done: true };",
    "133:     }",
    "134:   };",
    "135: Object.defineProperty(exports, '__esModule', { value: true });",
    "136: exports.getValue = exports.add = void 0;",
    "137: exports.improveSemantics = improveSemantics;",
    "138: var openai_1 = require('openai');",
    "139: var fs = require('fs/promises');",
    "140: var child_process_1 = require('child_process');",
    "141: var add = function (a, b) {",
    "142:   return a + b;",
    "143: };",
    "144: exports.add = add;",
    "145: var getValue = function (value) {",
    "146:   return console.log(value);",
    "147: };",
    "148: exports.getValue = getValue;",
    "149: function improveSemantics() {",
    "150:   return __awaiter(this, void 0, void 0, function () {",
    "151:     var improvedHtml, error_1;",
    "152:     return __generator(this, function (_a) {",
    "153:       switch (_a.label) {",
    "154:         case 0:",
    "155:           _a.trys.push([0, 2, , 3]);",
    "156:           return [",
    "157:             4 /*yield*/,",
    "158:             improveHtmlSemantics({",
    "159:               htmlFilePath: './index.html',",
    "160:               openAIApiKey: 'your-api-key-here',",
    "161:               openAIModel: 'gpt-4o-mini',",
    "162:               openVSCode: true,",
    "163:             }),",
    "164:           ];",
    "165:         case 1:",
    "166:           improvedHtml = _a.sent();",
    "167:           console.log('Improved HTML:', improvedHtml);",
    "168:           return [3 /*break*/, 3];",
    "169:         case 2:",
    "170:           error_1 = _a.sent();",
    "171:           console.error('Error improving HTML:', error_1);",
    "172:           return [3 /*break*/, 3];",
    "173:         case 3:",
    "174:           return [2 /*return*/];",
    "175:       }",
    "176:     });",
    "177:   });",
    "178: }",
    "179: function improveHtmlSemantics(_a) {",
    "180:   return __awaiter(this, arguments, void 0, function (_b) {",
    "181:     var client, htmlContent, prompt_1, completion, improvedHtml, error_2;",
    "182:     var htmlFilePath = _b.htmlFilePath,",
    "183:       openAIApiKey = _b.openAIApiKey,",
    "184:       _c = _b.openAIModel,",
    "185:       openAIModel = _c === void 0 ? 'gpt-4o-mini' : _c,",
    "186:       _d = _b.openVSCode,",
    "187:       openVSCode = _d === void 0 ? false : _d;",
    "188:     return __generator(this, function (_e) {",
    "189:       switch (_e.label) {",
    "190:         case 0:",
    "191:           client = new openai_1.OpenAI({ apiKey: openAIApiKey });",
    "192:           _e.label = 1;",
    "193:         case 1:",
    "194:           _e.trys.push([1, 5, , 6]);",
    "195:           return [4 /*yield*/, fs.readFile(htmlFilePath, 'utf8')];",
    "196:         case 2:",
    "197:           htmlContent = _e.sent();",
    "198:           prompt_1 =",
    "199:             'Please make the following HTML more semantic and accessible. Consider using header tags instead of just <p> or using <section>/<article> instead of <div> where appropriate. Do not response with any other words or content EXCEPT for the html code. Also do not include html at the start or at the end. This is extremely important. Here is the HTML content:\\n\\n'.concat(",
    "200:               htmlContent,",
    "201:             );",
    "202:           return [",
    "203:             4 /*yield*/,",
    "204:             client.chat.completions.create({",
    "205:               model: openAIModel,",
    "206:               messages: [",
    "207:                 {",
    "208:                   role: 'system',",
    "209:                   content:",
    "210:                     'You are a front-end developer that is an expert in semantic HTML. You are helping a colleague improve the semantic structure of their HTML code to make it more accessible. You are not allowed to change any content or words in the HTML code except for the HTML tags and the attributes of those tags. You can also add new tags or attributes where necessary.',",
    "211:                 },",
    "212:                 { role: 'user', content: prompt_1 },",
    "213:               ],",
    "214:             }),",
    "215:           ];",
    "216:         case 3:",
    "217:           completion = _e.sent();",
    "218:           improvedHtml = completion.choices[0].message.content || '';",
    "219:           return [",
    "220:             4 /*yield*/,",
    "221:             fs.writeFile(htmlFilePath, improvedHtml, 'utf8'),",
    "222:           ];",
    "223:         case 4:",
    "224:           _e.sent();",
    "225:           console.log(",
    "226:             'The file '.concat(htmlFilePath, ' has been updated successfully.'),",
    "227:           );",
    "228:           if (openVSCode) {",
    "229:             (0, child_process_1.exec)(",
    "230:               'git difftool '.concat(htmlFilePath),",
    "231:               function (error, stdout, stderr) {",
    "232:                 if (error) {",
    "233:                   console.log(",
    "234:                     'Failed to open VSCode with git difftool. Make sure git is installed and configured correctly.',",
    "235:                   );",
    "236:                   return;",
    "237:                 }",
    "238:                 if (stderr) {",
    "239:                   console.log('stderr: '.concat(stderr));",
    "240:                   return;",
    "241:                 }",
    "242:                 console.log(",
    "243:                   'Opened working tree changes for '.concat(",
    "244:                     htmlFilePath,",
    "245:                     ' in VSCode.',",
    "246:                   ),",
    "247:                 );",
    "248:               },",
    "249:             );",
    "250:           }",
    "251:           return [2 /*return*/, improvedHtml];",
    "252:         case 5:",
    "253:           error_2 = _e.sent();",
    "254:           console.error('An error occurred:', error_2);",
    "255:           throw error_2;",
    "256:         case 6:",
    "257:           return [2 /*return*/];",
    "258:       }",
    "259:     });",
    "260:   });",
    "261: }",
    "262: improveSemantics();",
    "263: "
  ],
  "src/index.ts": [
    "1: import { init } from '@/utils/init';",
    "2: import { check } from '@/utils/check';",
    "3: import { fixFile, fixRepo } from '@/utils/fix';",
    "4: ",
    "5: export { init, check, fixFile, fixRepo };",
    "6: "
  ],
  "src/index.html": [
    "1: <!doctype html>",
    "2: <html>",
    "3:   <head>",
    "4:     <title>My HTML Page</title>",
    "5:   </head>",
    "6:   <body>",
    "7:     <div>",
    "8:       <p>Welcome to my website!</p>",
    "9:       <p>This is the first div.</p>",
    "10:     </div>",
    "11: ",
    "12:     <div>",
    "13:       <p>About Me</p>",
    "14:       <p>I am a web developer.</p>",
    "15:     </div>",
    "16: ",
    "17:     <div>",
    "18:       <p>Contact Information</p>",
    "19:       <p>Email: example@example.com</p>",
    "20:       <p>Phone: 123-456-7890</p>",
    "21:     </div>",
    "22:   </body>",
    "23: </html>",
    "24: "
  ],
  "src/cli.ts": [
    "1: #!/usr/bin/env node",
    "2: import { Command } from 'commander';",
    "3: import inquirer from 'inquirer';",
    "4: import { init, check, fixFile, fixRepo } from './index';",
    "5: import * as dotenv from 'dotenv';",
    "6: ",
    "7: const program = new Command();",
    "8: dotenv.config();",
    "9: ",
    "10: program",
    "11:   .name('guidedog')",
    "12:   .description(",
    "13:     'An AI powered code library to assist web-developers create more accessible websites and applications.',",
    "14:   )",
    "15:   .version('1.0.0');",
    "16: ",
    "17: program",
    "18:   .command('init')",
    "19:   .description('Initialize the accessibility config for the repo')",
    "20:   .action(async () => {",
    "21:     console.log('Starting init...');",
    "22:     try {",
    "23:       let apiKey: string = process.env.OPENAI_API_KEY || '';",
    "24: ",
    "25:       if (apiKey) {",
    "26:         console.log('OpenAI API key found in environment variables');",
    "27: ",
    "28:         const useExistingKeyResponse = await inquirer.prompt({",
    "29:           type: 'confirm',",
    "30:           name: 'useExistingKey',",
    "31:           message: 'Do you want to use the existing API key?',",
    "32:           default: true,",
    "33:         });",
    "34: ",
    "35:         if (!useExistingKeyResponse.useExistingKey) {",
    "36:           apiKey = ''; // clear api key so it triggers the next input prompt",
    "37:         }",
    "38:       }",
    "39: ",
    "40:       if (!apiKey) {",
    "41:         console.log('OpenAI API key not found in environment variables');",
    "42:         const apiKeyResponse = await inquirer.prompt({",
    "43:           type: 'input',",
    "44:           name: 'apiKey',",
    "45:           message: 'Enter your OpenAI API key:',",
    "46:           validate: (input) => input.length > 0 || 'API key cannot be empty',",
    "47:         });",
    "48: ",
    "49:         apiKey = apiKeyResponse.apiKey;",
    "50:       }",
    "51: ",
    "52:       const answers = await inquirer.prompt({",
    "53:         type: 'list',",
    "54:         name: 'framework',",
    "55:         message: 'What framework are you using?',",
    "56:         choices: ['React', 'Angular', 'Vue', 'Other'],",
    "57:       });",
    "58: ",
    "59:       await init(apiKey, answers.framework);",
    "60:       console.log('✅ Init completed!');",
    "61:     } catch (error) {",
    "62:       program.error(`❌ Error during initialization:\\n${error}`);",
    "63:     }",
    "64:   });",
    "65: ",
    "66: program",
    "67:   .command('check')",
    "68:   .description('Check accessibility of your project')",
    "69:   .option('--report', 'Generate a detailed accessibility report')",
    "70:   .action(async (options) => {",
    "71:     try {",
    "72:       console.log('Starting check...');",
    "73: ",
    "74:       await check(options.report);",
    "75: ",
    "76:       console.log('✅ Check completed!');",
    "77:     } catch (error) {",
    "78:       program.error(`❌Error during checking:\\n${error}`);",
    "79:     }",
    "80:   });",
    "81: ",
    "82: // TODO: Add option for fixFile",
    "83: program",
    "84:   .command('guide')",
    "85:   .description('Fix accessibility issues in a specific file')",
    "86:   .action(() => {",
    "87:     fixRepo();",
    "88:   });",
    "89: ",
    "90: program.parse(process.argv);",
    "91: "
  ],
  "TestFiles/missingformlabels.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>Missing Form Labels</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <h1>Form Without Labels</h1>",
    "10:     <form>",
    "11:       <input type=\"text\" placeholder=\"Enter your name\" />",
    "12:       <input type=\"email\" placeholder=\"Enter your email\" />",
    "13:       <button type=\"submit\">Submit</button>",
    "14:     </form>",
    "15:   </body>",
    "16: </html>",
    "17: "
  ],
  "TestFiles/missingbutton.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>Empty Button Label</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <h1>Button with No Label</h1>",
    "10:     <button aria-label=\"\">Click me</button>",
    "11:   </body>",
    "12: </html>",
    "13: "
  ],
  "TestFiles/htmlsample.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>Sample Plain HTML</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <h1>Welcome to Our Website</h1>",
    "10:     <p>This is a sample paragraph with some <a href=\"#\">links</a>.</p>",
    "11:     <img src=\"image.jpg\" alt=\"\" />",
    "12:     <button onclick=\"alert('Button clicked!')\">Click me</button>",
    "13:     <input type=\"text\" placeholder=\"Type here\" />",
    "14:   </body>",
    "15: </html>",
    "16: "
  ],
  "TestFiles/ariaissue.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>ARIA Sample</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <div role=\"navigation\">",
    "10:       <a href=\"#\" role=\"button\">Link as Button</a>",
    "11:     </div>",
    "12:     <div aria-hidden=\"true\">",
    "13:       <h2>This heading is hidden from assistive technologies</h2>",
    "14:     </div>",
    "15:     <button aria-label=\"\">No label here</button>",
    "16:   </body>",
    "17: </html>",
    "18: "
  ],
  "TestFiles/angularsample.ts": [
    "1: // import { Component } from '@angular/core';",
    "2: ",
    "3: // @Component({",
    "4: //   selector: 'app-sample',",
    "5: //   template: `",
    "6: //     <h2>Angular Sample Component</h2>",
    "7: //     <img src=\"example.png\" alt=\"\">",
    "8: //     <button (click)=\"onClick()\">Submit</button>",
    "9: //     <input type=\"text\" placeholder=\"Search...\">",
    "10: //     <p>This paragraph has <a href=\"#\">a link</a>.</p>",
    "11: //   `",
    "12: // })",
    "13: // export class SampleComponent {",
    "14: //   onClick() {",
    "15: //     alert('Form submitted!');",
    "16: //   }",
    "17: // }",
    "18: "
  ],
  "src/utils/init.ts": [
    "1: import { runCodeScan } from '@/helpers/CodeBaseScan';",
    "2: import { CreateAssistant } from '@/helpers/ModelHandler';",
    "3: import { initConfig, saveAPIKey, createNewRun } from '@/helpers/config';",
    "4: import { createfileLineBreakdown } from '@/helpers/FileLineBreakdown';",
    "5: ",
    "6: // Start Generation Here",
    "7: async function init(apiKey: string, framework: string) {",
    "8:   try {",
    "9:     saveAPIKey(apiKey);",
    "10:     const contextFiles = await runCodeScan();",
    "11: ",
    "12:     const runPath = await createNewRun();",
    "13: ",
    "14:     const fileLineBreakdown = await createfileLineBreakdown(",
    "15:       contextFiles,",
    "16:       runPath,",
    "17:     );",
    "18: ",
    "19:     const response = await CreateAssistant(apiKey, fileLineBreakdown);",
    "20: ",
    "21:     const _config = {",
    "22:       framework: framework,",
    "23:       assistantId: response.assistant.id,",
    "24:       contextId: response.contextVectorID,",
    "25:     };",
    "26: ",
    "27:     await initConfig(_config);",
    "28:   } catch (error) {",
    "29:     throw error;",
    "30:   }",
    "31: }",
    "32: ",
    "33: export { init };",
    "34: "
  ],
  "src/utils/fix.ts": [
    "1: import { SuggestRepoChanges } from '@/helpers/ModelHandler';",
    "2: import * as fs from 'fs/promises';",
    "3: import * as dotenv from 'dotenv';",
    "4: import path from 'path';",
    "5: ",
    "6: export async function fixFile(dir: string) {",
    "7:   console.log(`fix specific file at [${dir}]`);",
    "8: }",
    "9: ",
    "10: async function fixRepo() {",
    "11:   try {",
    "12:     dotenv.config();",
    "13:     const apiKey = process.env.OPENAI_API_KEY;",
    "14:     const directoryPath = path.join(process.cwd(), '.guidedog');",
    "15:     let configObj = await import(",
    "16:       path.join(directoryPath, 'guidedog.config.cjs')",
    "17:     );",
    "18: ",
    "19:     if (apiKey != null) {",
    "20:       const assistantId = configObj.default.assistantId;",
    "21:       const contextId = configObj.default.contextId;",
    "22: ",
    "23:       const suggestionList = await SuggestRepoChanges(",
    "24:         apiKey,",
    "25:         assistantId,",
    "26:         contextId,",
    "27:       );",
    "28: ",
    "29:       return suggestionList;",
    "30:     } else {",
    "31:       throw new Error('No API Key found');",
    "32:     }",
    "33:   } catch (error) {",
    "34:     console.log('Error getting suggestions for the Repo: ' + error);",
    "35:   }",
    "36: }",
    "37: ",
    "38: export { fixRepo };",
    "39: "
  ],
  "src/utils/check.ts": [
    "1: import { AxePuppeteer } from '@axe-core/puppeteer';",
    "2: import puppeteer from 'puppeteer';",
    "3: import * as fs from 'fs';",
    "4: import { exec } from 'child_process';",
    "5: import { getConfig, DIR_PATH } from '@/helpers/config';",
    "6: import path from 'path';",
    "7: ",
    "8: const retry = async (",
    "9:   url: string,",
    "10:   resolve: any,",
    "11:   retries: number = 5,",
    "12:   delay: number = 5000,",
    "13: ) => {",
    "14:   for (let attempt = 0; attempt < retries; attempt++) {",
    "15:     try {",
    "16:       await new Promise((res) => setTimeout(res, delay));",
    "17: ",
    "18:       const response = await fetch(url);",
    "19: ",
    "20:       if (response.ok) {",
    "21:         console.log('Build is up and running.');",
    "22:         resolve();",
    "23:         return;",
    "24:       } else {",
    "25:         console.log(",
    "26:           `Serving attempt ${attempt + 1} failed: Server is not up yet. Retrying...`,",
    "27:         );",
    "28:       }",
    "29:     } catch (error) {",
    "30:       console.log(",
    "31:         `Serving attempt ${attempt + 1} failed: ${error}. Retrying...`,",
    "32:       );",
    "33:     }",
    "34:   }",
    "35: ",
    "36:   throw `Server failed to start after ${retries} attempts.`;",
    "37: };",
    "38: ",
    "39: const build = async (cmd: string) =>",
    "40:   new Promise<void>((resolve, reject) => {",
    "41:     exec(cmd, (error, stdout, stderr) => {",
    "42:       if (error) {",
    "43:         return reject(`Build error: ${error}`);",
    "44:       }",
    "45:       if (stderr) {",
    "46:         return reject(`Build stderr: ${stderr}`);",
    "47:       }",
    "48:       console.log(`Build stdout: ${stdout}`);",
    "49:       resolve();",
    "50:     });",
    "51:   });",
    "52: ",
    "53: const serveBuild = async (cmd: string) =>",
    "54:   new Promise<{ serverProcess: any }>((resolve, reject) => {",
    "55:     const serverProcess = exec(cmd, (error, stdout, stderr) => {",
    "56:       if (error) {",
    "57:         return reject(`Serve error: ${error}`);",
    "58:       }",
    "59:       if (stderr) {",
    "60:         return reject(`Serve stderr: ${stderr}`);",
    "61:       }",
    "62:       console.log(`Serve stdout: ${stdout}`);",
    "63:     });",
    "64: ",
    "65:     const url = 'http://localhost:3000/';",
    "66:     retry(url, () => resolve({ serverProcess })).catch(reject);",
    "67:   });",
    "68: ",
    "69: const stopServer = (serverProcess: any) => {",
    "70:   try {",
    "71:     process.kill(serverProcess.pid + 1, 'SIGTERM');",
    "72:     process.exit(0);",
    "73:   } catch (error) {",
    "74:     throw `Error stopping the server: ${error}`;",
    "75:   }",
    "76: };",
    "77: ",
    "78: export async function check(flag: boolean) {",
    "79:   let serverProcess;",
    "80: ",
    "81:   try {",
    "82:     const _config = await getConfig();",
    "83:     switch (_config?.framework) {",
    "84:       case 'React':",
    "85:         await build('npm run build');",
    "86:         ({ serverProcess } = await serveBuild('npx serve -s build -p 3000'));",
    "87:         break;",
    "88:       case 'Vue':",
    "89:         await build('npx vite build');",
    "90:         ({ serverProcess } = await serveBuild('npx serve -s dist -p 3000'));",
    "91:         break;",
    "92:       case 'Angular':",
    "93:         // await build('npx ng build');",
    "94:         ({ serverProcess } = await serveBuild('npx ng serve --port 3000'));",
    "95:         break;",
    "96:       default:",
    "97:         throw 'Unsupported framework';",
    "98:     }",
    "99: ",
    "100:     const browser = await puppeteer.launch();",
    "101:     const page = await browser.newPage();",
    "102:     await page.goto(`http://localhost:3000`);",
    "103: ",
    "104:     const results = await new AxePuppeteer(page).analyze();",
    "105: ",
    "106:     let p2 = 0; // Critical and Serious issues",
    "107:     let p1 = 0; // Moderate issues",
    "108:     let p0 = 0; // Minor issues",
    "109: ",
    "110:     results.violations.forEach((violation) => {",
    "111:       violation.nodes.forEach((node) => console.log(node));",
    "112:     });",
    "113: ",
    "114:     // Count issues by impact",
    "115:     results.violations.forEach((violation) => {",
    "116:       switch (violation.impact) {",
    "117:         case 'critical':",
    "118:         case 'serious':",
    "119:           p2 += violation.nodes.length;",
    "120:           break;",
    "121:         case 'moderate':",
    "122:           p1 += violation.nodes.length;",
    "123:           break;",
    "124:         case 'minor':",
    "125:           p0 += violation.nodes.length;",
    "126:           break;",
    "127:       }",
    "128:     });",
    "129: ",
    "130:     // Calculate the raw score",
    "131:     const rawScore = ((0.4 * p2 + 0.8 * p1 + p0) / (p1 + p2 + p0)).toFixed(2);",
    "132: ",
    "133:     // Optionally weight the score",
    "134:     const weightedScore = 500 + parseFloat(rawScore) * 500.0;",
    "135:     console.log(`minor: ${p0} | moderate: ${p1} | critical: ${p2}`);",
    "136:     console.log(`Raw score: ${rawScore} | Weighted score: ${weightedScore}`);",
    "137: ",
    "138:     const score = {",
    "139:       rawScore,",
    "140:       weightedScore,",
    "141:       serious: p2,",
    "142:       moderate: p1,",
    "143:       minor: p0,",
    "144:     };",
    "145: ",
    "146:     if (flag) {",
    "147:       fs.writeFileSync(",
    "148:         path.join(DIR_PATH, 'accessibility-results.json'),",
    "149:         JSON.stringify(results, null, 2),",
    "150:         'utf8',",
    "151:       );",
    "152: ",
    "153:       fs.writeFileSync(",
    "154:         path.join(DIR_PATH, 'accessibility-score.json'),",
    "155:         JSON.stringify(score, null, 2),",
    "156:         'utf-8',",
    "157:       );",
    "158:     }",
    "159: ",
    "160:     await browser.close();",
    "161: ",
    "162:     const accessibilityResult = { score: score, violation: results.violations };",
    "163: ",
    "164:     return accessibilityResult;",
    "165:   } catch (error) {",
    "166:     throw error;",
    "167:   } finally {",
    "168:     if (serverProcess) stopServer(serverProcess);",
    "169:   }",
    "170: }",
    "171: "
  ],
  "src/helpers/readIgnore.ts": [
    "1: import fs from 'fs';",
    "2: import path from 'path';",
    "3: ",
    "4: export function readIgnore() {",
    "5:   const ignorePath = path.join(process.cwd(), '.guidedogignore');",
    "6: ",
    "7:   try {",
    "8:     const data = fs.readFileSync(ignorePath, 'utf-8');",
    "9: ",
    "10:     const ignorePatterns = data",
    "11:       .split('\\n')",
    "12:       .map((line) => line.trim())",
    "13:       .filter((line) => line && !line.startsWith('#')); // Filter out empty lines and comments",
    "14: ",
    "15:     return ignorePatterns;",
    "16:   } catch (error) {",
    "17:     return [];",
    "18:   }",
    "19: }",
    "20: "
  ],
  "src/helpers/config.ts": [
    "1: import { OpenAI } from 'openai';",
    "2: import * as fs from 'fs';",
    "3: import path from 'path';",
    "4: import _ from 'lodash';",
    "5: ",
    "6: interface IConfig {",
    "7:   framework?: string;",
    "8:   assistantId?: string;",
    "9:   contextId?: string;",
    "10:   rules?: any;",
    "11: }",
    "12: ",
    "13: export const DIR_PATH = path.join(process.cwd(), '.guidedog');",
    "14: export const CONFIG_PATH = path.join(DIR_PATH, 'guidedog.config.cjs');",
    "15: ",
    "16: export async function initConfig(_config: IConfig) {",
    "17:   try {",
    "18:     if (!fs.existsSync(DIR_PATH)) {",
    "19:       fs.mkdirSync(DIR_PATH);",
    "20:     }",
    "21: ",
    "22:     if (fs.existsSync(CONFIG_PATH)) {",
    "23:       let configObj = await import(CONFIG_PATH);",
    "24:       configObj = _.merge(configObj.default, _config); // Deep merge the configurations",
    "25: ",
    "26:       fs.writeFileSync(",
    "27:         CONFIG_PATH,",
    "28:         `module.exports = ${JSON.stringify(configObj, null, 2)};`,",
    "29:       );",
    "30:     } else {",
    "31:       // Write the new config object to the file",
    "32:       fs.writeFileSync(",
    "33:         CONFIG_PATH,",
    "34:         `module.exports = ${JSON.stringify(_config, null, 2)};`,",
    "35:         { encoding: 'utf-8' },",
    "36:       );",
    "37:     }",
    "38:   } catch (error) {",
    "39:     throw error;",
    "40:   }",
    "41: }",
    "42: ",
    "43: export const getConfig = async (): Promise<IConfig | undefined> => {",
    "44:   try {",
    "45:     const _config = await import(CONFIG_PATH);",
    "46: ",
    "47:     return _config.default;",
    "48:   } catch (error) {",
    "49:     throw 'Error: Configuration file can not be found';",
    "50:   }",
    "51: };",
    "52: ",
    "53: export async function updateConfig(",
    "54:   assistant: OpenAI.Beta.Assistants.Assistant,",
    "55: ) {",
    "56:   // Read existing config or create a new one",
    "57:   let config: { assistantId: string } = { assistantId: '' }; // TODO: make this a proper config object",
    "58: ",
    "59:   try {",
    "60:     const existingConfig = fs.readFileSync(CONFIG_PATH, {",
    "61:       encoding: 'utf8',",
    "62:     });",
    "63:     config = JSON.parse(existingConfig);",
    "64:     // Append assistantId to the config",
    "65:     config['assistantId'] = assistant.id;",
    "66: ",
    "67:     // Write the updated config back to the file",
    "68:     fs.writeFileSync(",
    "69:       DIR_PATH,",
    "70:       `module.exports = ${JSON.stringify(config, null, 2)};`,",
    "71:       'utf8',",
    "72:     );",
    "73:     console.log('Configuration saved to .guidedog/guidedog.config.cjs');",
    "74:   } catch (error) {",
    "75:     console.log('No existing config found, creating a new one.');",
    "76:   }",
    "77: }",
    "78: ",
    "79: export async function createNewRun() {",
    "80:   // .toJSON is an easy way to give us YYYY-MM-DD-${time} format to avoid using '/'s as that causes issues for path names",
    "81:   const todaysDate = new Date().toJSON();",
    "82: ",
    "83:   const newRunPath = path.join(",
    "84:     process.cwd(),",
    "85:     `.guidedog/runs/run-${todaysDate}`,",
    "86:   );",
    "87: ",
    "88:   try {",
    "89:     if (!fs.existsSync(newRunPath)) {",
    "90:       fs.mkdirSync(newRunPath, { recursive: true });",
    "91:     } else {",
    "92:       console.log(",
    "93:         'Run path already exists for this exact time. Returning existing run path.',",
    "94:       );",
    "95:     }",
    "96: ",
    "97:     return newRunPath;",
    "98:   } catch (error) {",
    "99:     throw error;",
    "100:   }",
    "101: }",
    "102: ",
    "103: export async function saveAPIKey(apiKey: string) {",
    "104:   const envPath = path.join(process.cwd(), '.env');",
    "105:   const apiKeyEntry = `OPENAI_API_KEY=${apiKey}`;",
    "106: ",
    "107:   if (fs.existsSync(envPath)) {",
    "108:     const fileContents = fs.readFileSync(envPath, { encoding: 'utf8' });",
    "109: ",
    "110:     if (fileContents.includes('OPENAI_API_KEY=')) {",
    "111:       const updatedContents = fileContents.replace(",
    "112:         /OPENAI_API_KEY=.*/,",
    "113:         apiKeyEntry,",
    "114:       );",
    "115:       fs.writeFileSync(envPath, updatedContents, { encoding: 'utf8' });",
    "116:       console.log('API key updated in .env file.');",
    "117:     } else {",
    "118:       fs.appendFileSync(envPath, `\\n${apiKeyEntry}`, { encoding: 'utf8' });",
    "119:       console.log('API key appended to .env file.');",
    "120:     }",
    "121:   } else {",
    "122:     // Create a new .env file and add the API key",
    "123:     fs.writeFileSync(envPath, apiKeyEntry, { encoding: 'utf8' });",
    "124:     console.log('.env file created and API key added.');",
    "125:   }",
    "126: }",
    "127: "
  ],
  "src/helpers/ModelHandler.ts": [
    "1: import OpenAI from 'openai';",
    "2: import * as fs from 'fs';",
    "3: ",
    "4: export async function CreateAssistant(apiKey: string, htmlFile: string) {",
    "5:   console.log('Creating assistant \"GuideDog\"...');",
    "6:   try {",
    "7:     const client = new OpenAI({ apiKey });",
    "8:     // TODO: Put in accessibility criteria file (JSON)",
    "9:     const contextVectorID = await CreateVectorStore(htmlFile, client);",
    "10: ",
    "11:     const assistant = await client.beta.assistants.create({",
    "12:       name: 'GuideDog',",
    "13:       instructions:",
    "14:         'You are an expert frontend developer that is tasked with helping me improve the accessibility of my frontend code.',",
    "15:       tools: [{ type: 'file_search' }],",
    "16:       tool_resources: {",
    "17:         file_search: {",
    "18:           vector_store_ids: [contextVectorID],",
    "19:         },",
    "20:       },",
    "21:       model: 'gpt-4o-mini',",
    "22:     });",
    "23: ",
    "24:     console.log('✅Created assistant \"GuideDog\"');",
    "25:     return { assistant, contextVectorID };",
    "26:   } catch (error) {",
    "27:     throw error;",
    "28:   }",
    "29: }",
    "30: ",
    "31: export async function SuggestRepoChanges(",
    "32:   apiKey: string,",
    "33:   assistantId: string,",
    "34:   contextId: string,",
    "35: ) {",
    "36:   const client = new OpenAI({ apiKey });",
    "37: ",
    "38:   // Prompt should be a string",
    "39:   const prompt: string = `",
    "40:   Please draw on the vector store knowledge base of repo files to provide accesibility suggestions according to WCAG guidelines.",
    "41:   Only return valid JSON with no extra text or code block delimiters or newline characters.",
    "42:   The JSON should be an array of objects with the following fields:",
    "43:   - Filename (string)",
    "44:   - Suggestion line number (number): This should be the line of the original code from the vector store where the suggestions is for. If the suggestions is something that covers multiple lines it should be the first line of the file.",
    "45:   - Type of accessibility issue (string)",
    "46:   - Suggested code improvement (string)",
    "47:   ",
    "48:   Example:",
    "49:   [",
    "50:     {",
    "51:       \"Filename\": \"index.html\",",
    "52:       \"suggestion line number\": 5,",
    "53:       \"type of accessibility issue\": \"Lack of semantic structure\",",
    "54:       \"suggested code improvement\": \"<header><h1>Welcome to my website!</h1></header>\"",
    "55:     }",
    "56:   ]",
    "57:   Make sure the response is valid JSON.",
    "58: `;",
    "59: ",
    "60:   const thread = await client.beta.threads.create({",
    "61:     messages: [",
    "62:       {",
    "63:         role: 'user',",
    "64:         content: prompt,",
    "65:       },",
    "66:     ],",
    "67:     tool_resources: {",
    "68:       file_search: {",
    "69:         vector_store_ids: [contextId],",
    "70:       },",
    "71:     },",
    "72:   });",
    "73: ",
    "74:   const run = await client.beta.threads.runs.createAndPoll(thread.id, {",
    "75:     assistant_id: assistantId,",
    "76:   });",
    "77: ",
    "78:   const messages = await client.beta.threads.messages.list(thread.id, {",
    "79:     run_id: run.id,",
    "80:   });",
    "81: ",
    "82:   //kinda strange to be converting obj -> json -> obj but for some reason the initial obj throws error when trying to access text field.",
    "83:   const lastMessage = JSON.stringify(",
    "84:     messages.data[messages.data.length - 1]?.content[0],",
    "85:   );",
    "86:   const jsonResponse = JSON.parse(lastMessage);",
    "87:   const suggestions = jsonResponse.text.value;",
    "88: ",
    "89:   console.log(suggestions);",
    "90:   return jsonResponse;",
    "91: }",
    "92: ",
    "93: async function CreateVectorStore(",
    "94:   htmlFile: string,",
    "95:   client: OpenAI,",
    "96: ): Promise<string> {",
    "97:   const fileStream = fs.createReadStream(htmlFile);",
    "98: ",
    "99:   let vectorStore = await client.beta.vectorStores.create({",
    "100:     name: 'Codebase Context',",
    "101:   });",
    "102: ",
    "103:   await client.beta.vectorStores.fileBatches.uploadAndPoll(vectorStore.id, {",
    "104:     files: [fileStream],",
    "105:   });",
    "106: ",
    "107:   return vectorStore.id;",
    "108: }",
    "109: "
  ],
  "src/helpers/FileLineBreakdown.ts": [
    "1: // src/helpers/createfileLineBreakdown.ts",
    "2: import path from 'path';",
    "3: import * as fs from 'fs';",
    "4: ",
    "5: export async function createfileLineBreakdown(",
    "6:   filePaths: string[],",
    "7:   runPath: string,",
    "8: ): Promise<string> {",
    "9:   console.log('Creating fileLineBreakdown file...');",
    "10:   const fileLineBreakdown: { [key: string]: string[] } = {}; // Initialize as an object",
    "11: ",
    "12:   try {",
    "13:     for (const filePath of filePaths) {",
    "14:       const content: string = await fs.promises.readFile(filePath, 'utf8'); // Read file as string",
    "15:       const code = content.split('\\n');",
    "16:       fileLineBreakdown[filePath] = code.map(",
    "17:         (line, index) => `${index + 1}: ${line}`,",
    "18:       );",
    "19:     }",
    "20: ",
    "21:     if (!fs.existsSync(runPath)) {",
    "22:       fs.mkdirSync(runPath, { recursive: true });",
    "23:     }",
    "24: ",
    "25:     // Write the mega file to the src directory",
    "26:     const outputPath = path.join(runPath, 'fileLineBreakdown.json');",
    "27:     await fs.promises.writeFile(",
    "28:       outputPath,",
    "29:       JSON.stringify(fileLineBreakdown, null, 2),",
    "30:       'utf8',",
    "31:     );",
    "32: ",
    "33:     return outputPath;",
    "34:   } catch (error) {",
    "35:     throw error;",
    "36:   }",
    "37: }",
    "38: "
  ],
  "src/helpers/CodeBaseScan.ts": [
    "1: import { glob } from 'glob';",
    "2: import { readIgnore } from '@/helpers/readIgnore';",
    "3: ",
    "4: export async function runCodeScan(): Promise<string[]> {",
    "5:   console.log('Scanning...');",
    "6:   const _ignore = readIgnore();",
    "7:   try {",
    "8:     const patterns = [",
    "9:       `**/*.{js,jsx,ts,tsx,html,htm,xhtml,css,scss,less,vue,svelte}`,",
    "10:     ];",
    "11:     const filePaths = await glob(patterns, {",
    "12:       ignore: [",
    "13:         ..._ignore,",
    "14:         'node_modules/**',",
    "15:         '*.json',",
    "16:         '.next/**',",
    "17:         'dist/**',",
    "18:         'build/**',",
    "19:         'public/**',",
    "20:       ],",
    "21:     });",
    "22: ",
    "23:     console.log('✅Scanning completed');",
    "24:     return filePaths;",
    "25:   } catch (error) {",
    "26:     throw error;",
    "27:   }",
    "28: }",
    "29: "
  ]
}