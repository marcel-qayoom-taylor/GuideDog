{
  "tsup.config.ts": [
    "1: import { defineConfig } from 'tsup';\r",
    "2: \r",
    "3: export default defineConfig({\r",
    "4:   entryPoints: ['src/index.ts', 'src/cli.ts'], // Include cli.ts\r",
    "5:   format: ['cjs', 'esm'],\r",
    "6:   dts: true,\r",
    "7:   outDir: 'dist',\r",
    "8:   clean: true,\r",
    "9: });\r",
    "10: "
  ],
  "tsup.config.js": [
    "1: import { defineConfig } from 'tsup';\r",
    "2: export default defineConfig({\r",
    "3:   entryPoints: ['src/index.ts'],\r",
    "4:   format: ['cjs', 'esm'],\r",
    "5:   dts: true,\r",
    "6:   outDir: 'dist',\r",
    "7:   clean: true,\r",
    "8: });\r",
    "9: //# sourceMappingURL=tsup.config.js.map\r",
    "10: "
  ],
  "tsup.config.d.ts": [
    "1: declare const _default:\r",
    "2:   | import('tsup').Options\r",
    "3:   | import('tsup').Options[]\r",
    "4:   | ((\r",
    "5:       overrideOptions: import('tsup').Options,\r",
    "6:     ) =>\r",
    "7:       | import('tsup').Options\r",
    "8:       | import('tsup').Options[]\r",
    "9:       | Promise<import('tsup').Options | import('tsup').Options[]>);\r",
    "10: export default _default;\r",
    "11: //# sourceMappingURL=tsup.config.d.ts.map\r",
    "12: "
  ],
  "TestFiles\\missingformlabels.html": [
    "1: <!doctype html>\r",
    "2: <html lang=\"en\">\r",
    "3:   <head>\r",
    "4:     <meta charset=\"UTF-8\" />\r",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r",
    "6:     <title>Missing Form Labels</title>\r",
    "7:   </head>\r",
    "8:   <body>\r",
    "9:     <h1>Form Without Labels</h1>\r",
    "10:     <form>\r",
    "11:       <input type=\"text\" placeholder=\"Enter your name\" />\r",
    "12:       <input type=\"email\" placeholder=\"Enter your email\" />\r",
    "13:       <button type=\"submit\">Submit</button>\r",
    "14:     </form>\r",
    "15:   </body>\r",
    "16: </html>\r",
    "17: "
  ],
  "TestFiles\\missingbutton.html": [
    "1: <!doctype html>\r",
    "2: <html lang=\"en\">\r",
    "3:   <head>\r",
    "4:     <meta charset=\"UTF-8\" />\r",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r",
    "6:     <title>Empty Button Label</title>\r",
    "7:   </head>\r",
    "8:   <body>\r",
    "9:     <h1>Button with No Label</h1>\r",
    "10:     <button aria-label=\"\">Click me</button>\r",
    "11:   </body>\r",
    "12: </html>\r",
    "13: "
  ],
  "TestFiles\\htmlsample.html": [
    "1: <!doctype html>\r",
    "2: <html lang=\"en\">\r",
    "3:   <head>\r",
    "4:     <meta charset=\"UTF-8\" />\r",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r",
    "6:     <title>Sample Plain HTML</title>\r",
    "7:   </head>\r",
    "8:   <body>\r",
    "9:     <h1>Welcome to Our Website</h1>\r",
    "10:     <p>This is a sample paragraph with some <a href=\"#\">links</a>.</p>\r",
    "11:     <img src=\"image.jpg\" alt=\"\" />\r",
    "12:     <button onclick=\"alert('Button clicked!')\">Click me</button>\r",
    "13:     <input type=\"text\" placeholder=\"Type here\" />\r",
    "14:   </body>\r",
    "15: </html>\r",
    "16: "
  ],
  "TestFiles\\ariaissue.html": [
    "1: <!doctype html>\r",
    "2: <html lang=\"en\">\r",
    "3:   <head>\r",
    "4:     <meta charset=\"UTF-8\" />\r",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r",
    "6:     <title>ARIA Sample</title>\r",
    "7:   </head>\r",
    "8:   <body>\r",
    "9:     <div role=\"navigation\">\r",
    "10:       <a href=\"#\" role=\"button\">Link as Button</a>\r",
    "11:     </div>\r",
    "12:     <div aria-hidden=\"true\">\r",
    "13:       <h2>This heading is hidden from assistive technologies</h2>\r",
    "14:     </div>\r",
    "15:     <button aria-label=\"\">No label here</button>\r",
    "16:   </body>\r",
    "17: </html>\r",
    "18: "
  ],
  "TestFiles\\angularsample.ts": [
    "1: // import { Component } from '@angular/core';\r",
    "2: \r",
    "3: // @Component({\r",
    "4: //   selector: 'app-sample',\r",
    "5: //   template: `\r",
    "6: //     <h2>Angular Sample Component</h2>\r",
    "7: //     <img src=\"example.png\" alt=\"\">\r",
    "8: //     <button (click)=\"onClick()\">Submit</button>\r",
    "9: //     <input type=\"text\" placeholder=\"Search...\">\r",
    "10: //     <p>This paragraph has <a href=\"#\">a link</a>.</p>\r",
    "11: //   `\r",
    "12: // })\r",
    "13: // export class SampleComponent {\r",
    "14: //   onClick() {\r",
    "15: //     alert('Form submitted!');\r",
    "16: //   }\r",
    "17: // }\r",
    "18: "
  ],
  "src\\utils.ts": [
    "1: import { OpenAI } from 'openai';\r",
    "2: import * as fs from 'fs/promises';\r",
    "3: import { exec } from 'child_process';\r",
    "4: import readline from 'readline';\r",
    "5: import { AxePuppeteer } from '@axe-core/puppeteer';\r",
    "6: import puppeteer from 'puppeteer';\r",
    "7: \r",
    "8: interface ImproveSemanticsOptions {\r",
    "9:   htmlFilePath: string;\r",
    "10:   openAIApiKey: string;\r",
    "11:   openAIModel?: string;\r",
    "12:   openVSCode?: boolean;\r",
    "13: }\r",
    "14: \r",
    "15: //Old Functions\r",
    "16: async function improveHtmlSemantics({\r",
    "17:   htmlFilePath,\r",
    "18:   openAIApiKey,\r",
    "19:   openAIModel = 'gpt-4o-mini',\r",
    "20:   openVSCode = true,\r",
    "21: }: ImproveSemanticsOptions): Promise<string> {\r",
    "22:   const client = new OpenAI({ apiKey: openAIApiKey });\r",
    "23: \r",
    "24:   try {\r",
    "25:     const htmlContent = await fs.readFile(htmlFilePath, 'utf8');\r",
    "26: \r",
    "27:     const prompt = `Please make the following HTML more semantic and accessible. Consider using header tags instead of just <p> or using <section>/<article> instead of <div> where appropriate. Do not response with any other words or content EXCEPT for the html code. This is extremely important. The file returned should be runnable as HTML code. E.g. shouldn't include dash tags. The first and final tag should be the first and final tag provided by the original html content e.g. <!doctype html>. Please do not write backticks at the start or end. e.g. backtick backtick backtick html which is commonly used by ai to display code nicely. please dont do this. Here is the HTML content:\\n\\n${htmlContent}`;\r",
    "28: \r",
    "29:     const completion = await client.chat.completions.create({\r",
    "30:       model: openAIModel,\r",
    "31:       messages: [\r",
    "32:         {\r",
    "33:           role: 'system',\r",
    "34:           content:\r",
    "35:             'You are a front-end developer that is an expert in semantic HTML. You are helping a colleague improve the semantic structure of their HTML code to make it more accessible. You are not allowed to change any content or words in the HTML code except for the HTML tags and the attributes of those tags. You can also add new tags or attributes where necessary.',\r",
    "36:         },\r",
    "37:         { role: 'user', content: prompt },\r",
    "38:       ],\r",
    "39:     });\r",
    "40: \r",
    "41:     const improvedHtml = completion.choices?.[0]?.message?.content || '';\r",
    "42: \r",
    "43:     if (!improvedHtml) {\r",
    "44:       throw new Error('No improved HTML was returned.');\r",
    "45:     }\r",
    "46: \r",
    "47:     await fs.writeFile(htmlFilePath, improvedHtml, 'utf8');\r",
    "48: \r",
    "49:     console.log(`The file ${htmlFilePath} has been updated successfully.`);\r",
    "50: \r",
    "51:     if (openVSCode) {\r",
    "52:       exec(`git difftool ${htmlFilePath}`, (error, stdout, stderr) => {\r",
    "53:         if (error) {\r",
    "54:           console.log(\r",
    "55:             'Failed to open VSCode with git difftool. Make sure git is installed and configured correctly.',\r",
    "56:           );\r",
    "57:           return;\r",
    "58:         }\r",
    "59:         if (stderr) {\r",
    "60:           console.log(`stderr: ${stderr}`);\r",
    "61:           return;\r",
    "62:         }\r",
    "63:         console.log(\r",
    "64:           `Opened working tree changes for ${htmlFilePath} in VSCode.`,\r",
    "65:         );\r",
    "66:       });\r",
    "67:     }\r",
    "68: \r",
    "69:     return improvedHtml;\r",
    "70:   } catch (error) {\r",
    "71:     console.error('An error occurred:', error);\r",
    "72:     throw error;\r",
    "73:   }\r",
    "74: }\r",
    "75: \r",
    "76: async function improveSemantics(htmlFilePath: string, openAIApiKey: string) {\r",
    "77:   try {\r",
    "78:     const improvedHtml = await improveHtmlSemantics({\r",
    "79:       htmlFilePath,\r",
    "80:       openAIApiKey,\r",
    "81:       openAIModel: 'gpt-4o-mini',\r",
    "82:       openVSCode: true,\r",
    "83:     });\r",
    "84: \r",
    "85:     console.log('HTML semantics improved successfully.');\r",
    "86:   } catch (error) {\r",
    "87:     console.error('Error improving HTML:', error);\r",
    "88:   }\r",
    "89: }\r",
    "90: \r",
    "91: const assessAccessibility = async (flag: boolean) => {\r",
    "92:   const browser = await puppeteer.launch();\r",
    "93:   const page = await browser.newPage();\r",
    "94:   await page.goto(`http://localhost:3000`);\r",
    "95: \r",
    "96:   const results = await new AxePuppeteer(page).analyze();\r",
    "97: \r",
    "98:   let p2 = 0; // Critical and Serious issues\r",
    "99:   let p1 = 0; // Moderate issues\r",
    "100:   let p0 = 0; // Minor issues\r",
    "101: \r",
    "102:   results.violations.forEach((violation) => {\r",
    "103:     violation.nodes.forEach((node) => console.log(node));\r",
    "104:   });\r",
    "105: \r",
    "106:   // Count issues by impact\r",
    "107:   results.violations.forEach((violation) => {\r",
    "108:     switch (violation.impact) {\r",
    "109:       case 'critical':\r",
    "110:       case 'serious':\r",
    "111:         p2 += violation.nodes.length;\r",
    "112:         break;\r",
    "113:       case 'moderate':\r",
    "114:         p1 += violation.nodes.length;\r",
    "115:         break;\r",
    "116:       case 'minor':\r",
    "117:         p0 += violation.nodes.length;\r",
    "118:         break;\r",
    "119:     }\r",
    "120:   });\r",
    "121: \r",
    "122:   // Calculate the raw score\r",
    "123:   const rawScore = (0.4 * p2 + 0.8 * p1 + p0) / (p1 + p2 + p0);\r",
    "124: \r",
    "125:   // Optionally weight the score\r",
    "126:   const weightedScore = 500 + rawScore * 500.0;\r",
    "127:   console.log(`minor: ${p0} | minor: ${p1} | minor: ${p2}`);\r",
    "128:   console.log(`Raw score: ${rawScore} | Weighted score: ${weightedScore}`);\r",
    "129: \r",
    "130:   const score = {\r",
    "131:     rawScore,\r",
    "132:     weightedScore,\r",
    "133:     serious: p2,\r",
    "134:     moderate: p1,\r",
    "135:     minor: p0,\r",
    "136:   };\r",
    "137: \r",
    "138:   if (flag) {\r",
    "139:     await fs.writeFile(\r",
    "140:       'accessibility-results.json',\r",
    "141:       JSON.stringify(results, null, 2),\r",
    "142:       'utf8',\r",
    "143:     );\r",
    "144: \r",
    "145:     await fs.writeFile(\r",
    "146:       'accessibility-score.json',\r",
    "147:       JSON.stringify(score, null, 2),\r",
    "148:       'utf-8',\r",
    "149:     );\r",
    "150:   }\r",
    "151: \r",
    "152:   await browser.close();\r",
    "153: \r",
    "154:   const accessibilityResult = { score, results };\r",
    "155: \r",
    "156:   return accessibilityResult;\r",
    "157: };\r",
    "158: \r",
    "159: // Export functions for use as a module\r",
    "160: // export { improveSemantics, improveHtmlSemantics, init, assessAccessibility };\r",
    "161: "
  ],
  "src\\utils.test.ts": [
    "1: // import { add } from './utils.js';\r",
    "2: // import { test, expect } from 'vitest';\r",
    "3: \r",
    "4: // test('add', () => {\r",
    "5: //   expect(add(1, 2)).toBe(3);\r",
    "6: // });\r",
    "7: "
  ],
  "src\\utils.js": [
    "1: 'use strict';\r",
    "2: var __awaiter =\r",
    "3:   (this && this.__awaiter) ||\r",
    "4:   function (thisArg, _arguments, P, generator) {\r",
    "5:     function adopt(value) {\r",
    "6:       return value instanceof P\r",
    "7:         ? value\r",
    "8:         : new P(function (resolve) {\r",
    "9:             resolve(value);\r",
    "10:           });\r",
    "11:     }\r",
    "12:     return new (P || (P = Promise))(function (resolve, reject) {\r",
    "13:       function fulfilled(value) {\r",
    "14:         try {\r",
    "15:           step(generator.next(value));\r",
    "16:         } catch (e) {\r",
    "17:           reject(e);\r",
    "18:         }\r",
    "19:       }\r",
    "20:       function rejected(value) {\r",
    "21:         try {\r",
    "22:           step(generator['throw'](value));\r",
    "23:         } catch (e) {\r",
    "24:           reject(e);\r",
    "25:         }\r",
    "26:       }\r",
    "27:       function step(result) {\r",
    "28:         result.done\r",
    "29:           ? resolve(result.value)\r",
    "30:           : adopt(result.value).then(fulfilled, rejected);\r",
    "31:       }\r",
    "32:       step((generator = generator.apply(thisArg, _arguments || [])).next());\r",
    "33:     });\r",
    "34:   };\r",
    "35: var __generator =\r",
    "36:   (this && this.__generator) ||\r",
    "37:   function (thisArg, body) {\r",
    "38:     var _ = {\r",
    "39:         label: 0,\r",
    "40:         sent: function () {\r",
    "41:           if (t[0] & 1) throw t[1];\r",
    "42:           return t[1];\r",
    "43:         },\r",
    "44:         trys: [],\r",
    "45:         ops: [],\r",
    "46:       },\r",
    "47:       f,\r",
    "48:       y,\r",
    "49:       t,\r",
    "50:       g;\r",
    "51:     return (\r",
    "52:       (g = { next: verb(0), throw: verb(1), return: verb(2) }),\r",
    "53:       typeof Symbol === 'function' &&\r",
    "54:         (g[Symbol.iterator] = function () {\r",
    "55:           return this;\r",
    "56:         }),\r",
    "57:       g\r",
    "58:     );\r",
    "59:     function verb(n) {\r",
    "60:       return function (v) {\r",
    "61:         return step([n, v]);\r",
    "62:       };\r",
    "63:     }\r",
    "64:     function step(op) {\r",
    "65:       if (f) throw new TypeError('Generator is already executing.');\r",
    "66:       while ((g && ((g = 0), op[0] && (_ = 0)), _))\r",
    "67:         try {\r",
    "68:           if (\r",
    "69:             ((f = 1),\r",
    "70:             y &&\r",
    "71:               (t =\r",
    "72:                 op[0] & 2\r",
    "73:                   ? y['return']\r",
    "74:                   : op[0]\r",
    "75:                     ? y['throw'] || ((t = y['return']) && t.call(y), 0)\r",
    "76:                     : y.next) &&\r",
    "77:               !(t = t.call(y, op[1])).done)\r",
    "78:           )\r",
    "79:             return t;\r",
    "80:           if (((y = 0), t)) op = [op[0] & 2, t.value];\r",
    "81:           switch (op[0]) {\r",
    "82:             case 0:\r",
    "83:             case 1:\r",
    "84:               t = op;\r",
    "85:               break;\r",
    "86:             case 4:\r",
    "87:               _.label++;\r",
    "88:               return { value: op[1], done: false };\r",
    "89:             case 5:\r",
    "90:               _.label++;\r",
    "91:               y = op[1];\r",
    "92:               op = [0];\r",
    "93:               continue;\r",
    "94:             case 7:\r",
    "95:               op = _.ops.pop();\r",
    "96:               _.trys.pop();\r",
    "97:               continue;\r",
    "98:             default:\r",
    "99:               if (\r",
    "100:                 !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&\r",
    "101:                 (op[0] === 6 || op[0] === 2)\r",
    "102:               ) {\r",
    "103:                 _ = 0;\r",
    "104:                 continue;\r",
    "105:               }\r",
    "106:               if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\r",
    "107:                 _.label = op[1];\r",
    "108:                 break;\r",
    "109:               }\r",
    "110:               if (op[0] === 6 && _.label < t[1]) {\r",
    "111:                 _.label = t[1];\r",
    "112:                 t = op;\r",
    "113:                 break;\r",
    "114:               }\r",
    "115:               if (t && _.label < t[2]) {\r",
    "116:                 _.label = t[2];\r",
    "117:                 _.ops.push(op);\r",
    "118:                 break;\r",
    "119:               }\r",
    "120:               if (t[2]) _.ops.pop();\r",
    "121:               _.trys.pop();\r",
    "122:               continue;\r",
    "123:           }\r",
    "124:           op = body.call(thisArg, _);\r",
    "125:         } catch (e) {\r",
    "126:           op = [6, e];\r",
    "127:           y = 0;\r",
    "128:         } finally {\r",
    "129:           f = t = 0;\r",
    "130:         }\r",
    "131:       if (op[0] & 5) throw op[1];\r",
    "132:       return { value: op[0] ? op[1] : void 0, done: true };\r",
    "133:     }\r",
    "134:   };\r",
    "135: Object.defineProperty(exports, '__esModule', { value: true });\r",
    "136: exports.getValue = exports.add = void 0;\r",
    "137: exports.improveSemantics = improveSemantics;\r",
    "138: var openai_1 = require('openai');\r",
    "139: var fs = require('fs/promises');\r",
    "140: var child_process_1 = require('child_process');\r",
    "141: var add = function (a, b) {\r",
    "142:   return a + b;\r",
    "143: };\r",
    "144: exports.add = add;\r",
    "145: var getValue = function (value) {\r",
    "146:   return console.log(value);\r",
    "147: };\r",
    "148: exports.getValue = getValue;\r",
    "149: function improveSemantics() {\r",
    "150:   return __awaiter(this, void 0, void 0, function () {\r",
    "151:     var improvedHtml, error_1;\r",
    "152:     return __generator(this, function (_a) {\r",
    "153:       switch (_a.label) {\r",
    "154:         case 0:\r",
    "155:           _a.trys.push([0, 2, , 3]);\r",
    "156:           return [\r",
    "157:             4 /*yield*/,\r",
    "158:             improveHtmlSemantics({\r",
    "159:               htmlFilePath: './index.html',\r",
    "160:               openAIApiKey: 'your-api-key-here',\r",
    "161:               openAIModel: 'gpt-4o-mini',\r",
    "162:               openVSCode: true,\r",
    "163:             }),\r",
    "164:           ];\r",
    "165:         case 1:\r",
    "166:           improvedHtml = _a.sent();\r",
    "167:           console.log('Improved HTML:', improvedHtml);\r",
    "168:           return [3 /*break*/, 3];\r",
    "169:         case 2:\r",
    "170:           error_1 = _a.sent();\r",
    "171:           console.error('Error improving HTML:', error_1);\r",
    "172:           return [3 /*break*/, 3];\r",
    "173:         case 3:\r",
    "174:           return [2 /*return*/];\r",
    "175:       }\r",
    "176:     });\r",
    "177:   });\r",
    "178: }\r",
    "179: function improveHtmlSemantics(_a) {\r",
    "180:   return __awaiter(this, arguments, void 0, function (_b) {\r",
    "181:     var client, htmlContent, prompt_1, completion, improvedHtml, error_2;\r",
    "182:     var htmlFilePath = _b.htmlFilePath,\r",
    "183:       openAIApiKey = _b.openAIApiKey,\r",
    "184:       _c = _b.openAIModel,\r",
    "185:       openAIModel = _c === void 0 ? 'gpt-4o-mini' : _c,\r",
    "186:       _d = _b.openVSCode,\r",
    "187:       openVSCode = _d === void 0 ? false : _d;\r",
    "188:     return __generator(this, function (_e) {\r",
    "189:       switch (_e.label) {\r",
    "190:         case 0:\r",
    "191:           client = new openai_1.OpenAI({ apiKey: openAIApiKey });\r",
    "192:           _e.label = 1;\r",
    "193:         case 1:\r",
    "194:           _e.trys.push([1, 5, , 6]);\r",
    "195:           return [4 /*yield*/, fs.readFile(htmlFilePath, 'utf8')];\r",
    "196:         case 2:\r",
    "197:           htmlContent = _e.sent();\r",
    "198:           prompt_1 =\r",
    "199:             'Please make the following HTML more semantic and accessible. Consider using header tags instead of just <p> or using <section>/<article> instead of <div> where appropriate. Do not response with any other words or content EXCEPT for the html code. Also do not include html at the start or at the end. This is extremely important. Here is the HTML content:\\n\\n'.concat(\r",
    "200:               htmlContent,\r",
    "201:             );\r",
    "202:           return [\r",
    "203:             4 /*yield*/,\r",
    "204:             client.chat.completions.create({\r",
    "205:               model: openAIModel,\r",
    "206:               messages: [\r",
    "207:                 {\r",
    "208:                   role: 'system',\r",
    "209:                   content:\r",
    "210:                     'You are a front-end developer that is an expert in semantic HTML. You are helping a colleague improve the semantic structure of their HTML code to make it more accessible. You are not allowed to change any content or words in the HTML code except for the HTML tags and the attributes of those tags. You can also add new tags or attributes where necessary.',\r",
    "211:                 },\r",
    "212:                 { role: 'user', content: prompt_1 },\r",
    "213:               ],\r",
    "214:             }),\r",
    "215:           ];\r",
    "216:         case 3:\r",
    "217:           completion = _e.sent();\r",
    "218:           improvedHtml = completion.choices[0].message.content || '';\r",
    "219:           return [\r",
    "220:             4 /*yield*/,\r",
    "221:             fs.writeFile(htmlFilePath, improvedHtml, 'utf8'),\r",
    "222:           ];\r",
    "223:         case 4:\r",
    "224:           _e.sent();\r",
    "225:           console.log(\r",
    "226:             'The file '.concat(htmlFilePath, ' has been updated successfully.'),\r",
    "227:           );\r",
    "228:           if (openVSCode) {\r",
    "229:             (0, child_process_1.exec)(\r",
    "230:               'git difftool '.concat(htmlFilePath),\r",
    "231:               function (error, stdout, stderr) {\r",
    "232:                 if (error) {\r",
    "233:                   console.log(\r",
    "234:                     'Failed to open VSCode with git difftool. Make sure git is installed and configured correctly.',\r",
    "235:                   );\r",
    "236:                   return;\r",
    "237:                 }\r",
    "238:                 if (stderr) {\r",
    "239:                   console.log('stderr: '.concat(stderr));\r",
    "240:                   return;\r",
    "241:                 }\r",
    "242:                 console.log(\r",
    "243:                   'Opened working tree changes for '.concat(\r",
    "244:                     htmlFilePath,\r",
    "245:                     ' in VSCode.',\r",
    "246:                   ),\r",
    "247:                 );\r",
    "248:               },\r",
    "249:             );\r",
    "250:           }\r",
    "251:           return [2 /*return*/, improvedHtml];\r",
    "252:         case 5:\r",
    "253:           error_2 = _e.sent();\r",
    "254:           console.error('An error occurred:', error_2);\r",
    "255:           throw error_2;\r",
    "256:         case 6:\r",
    "257:           return [2 /*return*/];\r",
    "258:       }\r",
    "259:     });\r",
    "260:   });\r",
    "261: }\r",
    "262: improveSemantics();\r",
    "263: "
  ],
  "src\\index.ts": [
    "1: import { init } from '@/utils/init';\r",
    "2: import { check } from '@/utils/check';\r",
    "3: import { fixFile, fixRepo } from '@/utils/fix';\r",
    "4: \r",
    "5: export { init, check, fixFile, fixRepo };\r",
    "6: "
  ],
  "src\\index.html": [
    "1: <!doctype html>\r",
    "2: <html>\r",
    "3:   <head>\r",
    "4:     <title>My HTML Page</title>\r",
    "5:   </head>\r",
    "6:   <body>\r",
    "7:     <div>\r",
    "8:       <p>Welcome to my website!</p>\r",
    "9:       <p>This is the first div.</p>\r",
    "10:     </div>\r",
    "11: \r",
    "12:     <div>\r",
    "13:       <p>About Me</p>\r",
    "14:       <p>I am a web developer.</p>\r",
    "15:     </div>\r",
    "16: \r",
    "17:     <div>\r",
    "18:       <p>Contact Information</p>\r",
    "19:       <p>Email: example@example.com</p>\r",
    "20:       <p>Phone: 123-456-7890</p>\r",
    "21:     </div>\r",
    "22:   </body>\r",
    "23: </html>\r",
    "24: "
  ],
  "src\\cli.ts": [
    "1: #!/usr/bin/env node\r",
    "2: import { Command } from 'commander';\r",
    "3: import inquirer from 'inquirer';\r",
    "4: import * as dotenv from 'dotenv';\r",
    "5: import * as fs from 'fs';\r",
    "6: import path from 'path';\r",
    "7: import { init, check, fixFile, fixRepo } from './index';\r",
    "8: import { DIR_PATH } from './helpers/config';\r",
    "9: \r",
    "10: const program = new Command();\r",
    "11: dotenv.config();\r",
    "12: \r",
    "13: program\r",
    "14:   .name('guidedog')\r",
    "15:   .description(\r",
    "16:     'An AI powered code library to assist web-developers create more accessible websites and applications.',\r",
    "17:   )\r",
    "18:   .version('1.0.0');\r",
    "19: \r",
    "20: program\r",
    "21:   .command('init')\r",
    "22:   .description('Initialize the accessibility config for the repo')\r",
    "23:   .action(async () => {\r",
    "24:     console.log('Starting init...');\r",
    "25:     try {\r",
    "26:       let apiKey: string = process.env.OPENAI_API_KEY || '';\r",
    "27: \r",
    "28:       if (apiKey) {\r",
    "29:         console.log('OpenAI API key found in environment variables');\r",
    "30: \r",
    "31:         const useExistingKeyResponse = await inquirer.prompt({\r",
    "32:           type: 'confirm',\r",
    "33:           name: 'useExistingKey',\r",
    "34:           message: 'Do you want to use the existing API key?',\r",
    "35:           default: true,\r",
    "36:         });\r",
    "37: \r",
    "38:         if (!useExistingKeyResponse.useExistingKey) {\r",
    "39:           apiKey = ''; // clear api key so it triggers the next input prompt\r",
    "40:         }\r",
    "41:       }\r",
    "42: \r",
    "43:       if (!apiKey) {\r",
    "44:         console.log('OpenAI API key not found in environment variables');\r",
    "45:         const apiKeyResponse = await inquirer.prompt({\r",
    "46:           type: 'input',\r",
    "47:           name: 'apiKey',\r",
    "48:           message: 'Enter your OpenAI API key:',\r",
    "49:           validate: (input) => input.length > 0 || 'API key cannot be empty',\r",
    "50:         });\r",
    "51: \r",
    "52:         apiKey = apiKeyResponse.apiKey;\r",
    "53:       }\r",
    "54: \r",
    "55:       const answers = await inquirer.prompt({\r",
    "56:         type: 'list',\r",
    "57:         name: 'framework',\r",
    "58:         message: 'What framework are you using?',\r",
    "59:         choices: ['React', 'Angular', 'Vue', 'Other'],\r",
    "60:       });\r",
    "61: \r",
    "62:       await init(apiKey, answers.framework);\r",
    "63:       console.log('✅ Init completed!');\r",
    "64:     } catch (error) {\r",
    "65:       program.error(`❌ Error during initialization:\\n${error}`);\r",
    "66:     }\r",
    "67:   });\r",
    "68: \r",
    "69: program\r",
    "70:   .command('check')\r",
    "71:   .description('Check accessibility of your project')\r",
    "72:   .option('-r, --report', 'Generate a detailed accessibility report')\r",
    "73:   .option('-s, --score', 'Assess accessibility score')\r",
    "74:   .action(async (options) => {\r",
    "75:     try {\r",
    "76:       console.log('Starting check...');\r",
    "77: \r",
    "78:       if (options.report) {\r",
    "79:         await check('report');\r",
    "80:       } else if (options.score) {\r",
    "81:         await check('score');\r",
    "82:       } else {\r",
    "83:         await check();\r",
    "84:       }\r",
    "85: \r",
    "86:       console.log('✅ Check completed!');\r",
    "87:       console.log('Ctrl + C to exit.');\r",
    "88:     } catch (error) {\r",
    "89:       program.error(`❌Error during checking:\\n${error}`);\r",
    "90:       console.log('Ctrl + C to exit.');\r",
    "91:     }\r",
    "92:   });\r",
    "93: \r",
    "94: // TODO: Add option for fixFile\r",
    "95: program\r",
    "96:   .command('fix')\r",
    "97:   .description('Fix accessibility issues')\r",
    "98:   .action(async () => {\r",
    "99:     console.log('Starting fix...');\r",
    "100: \r",
    "101:     try {\r",
    "102:       const scopeRes = await inquirer.prompt({\r",
    "103:         type: 'list',\r",
    "104:         name: 'scope',\r",
    "105:         message: 'Do you want to fix the whole repository or a specific file?',\r",
    "106:         choices: ['Whole repo', 'Specific file'],\r",
    "107:       });\r",
    "108: \r",
    "109:       if (scopeRes.scope == 'Specific file') {\r",
    "110:         const fileRes = await inquirer.prompt({\r",
    "111:           type: 'input',\r",
    "112:           name: 'filePath',\r",
    "113:           message: 'Enter your OpenAI API key:',\r",
    "114:           validate: async (input) => {\r",
    "115:             const file = path.join(DIR_PATH, input);\r",
    "116: \r",
    "117:             if (fs.existsSync(file)) {\r",
    "118:               return input.length > 0 || 'File path cannot be empty';\r",
    "119:             }\r",
    "120: \r",
    "121:             return 'File does not exist';\r",
    "122:           },\r",
    "123:         });\r",
    "124: \r",
    "125:         const file = path.join(DIR_PATH, fileRes.filePath);\r",
    "126:         fixFile(file);\r",
    "127:       } else {\r",
    "128:         fixRepo();\r",
    "129:       }\r",
    "130: \r",
    "131:       console.log('✅ Fix completed!');\r",
    "132:     } catch (error) {\r",
    "133:       program.error(`❌ Error during fixing:\\n${error}`);\r",
    "134:     }\r",
    "135:   });\r",
    "136: \r",
    "137: program.parse(process.argv);\r",
    "138: "
  ],
  "src\\utils\\init.ts": [
    "1: import { initConfig, saveAPIKey } from '@/helpers/config';\r",
    "2: import { createOpenAIClient } from '@/helpers/OpenaiClient';\r",
    "3: \r",
    "4: // Start Generation Here\r",
    "5: async function init(apiKey: string, framework: string) {\r",
    "6:   try {\r",
    "7:     saveAPIKey(apiKey);\r",
    "8: \r",
    "9:     createOpenAIClient();\r",
    "10: \r",
    "11:     const _config = {\r",
    "12:       framework: framework,\r",
    "13:     };\r",
    "14: \r",
    "15:     await initConfig(_config);\r",
    "16:   } catch (error) {\r",
    "17:     throw error;\r",
    "18:   }\r",
    "19: }\r",
    "20: \r",
    "21: export { init };\r",
    "22: "
  ],
  "src\\utils\\fix.ts": [
    "1: import { getRepoSuggestions } from '@/helpers/ModelHandler';\r",
    "2: import * as dotenv from 'dotenv';\r",
    "3: import path from 'path';\r",
    "4: \r",
    "5: export async function fixFile(dir: string) {\r",
    "6:   console.log(`fix specific file at [${dir}]`);\r",
    "7: }\r",
    "8: \r",
    "9: async function fixRepo() {\r",
    "10:   try {\r",
    "11:     dotenv.config();\r",
    "12:     const apiKey = process.env.OPENAI_API_KEY;\r",
    "13:     const directoryPath = path.join(process.cwd(), '.guidedog');\r",
    "14:     let configObj = await import(\r",
    "15:       path.join(directoryPath, 'guidedog.config.cjs')\r",
    "16:     );\r",
    "17: \r",
    "18:     if (apiKey != null) {\r",
    "19:       const assistantId = configObj.default.assistantId;\r",
    "20:       const contextId = configObj.default.contextId;\r",
    "21: \r",
    "22:       console.log('to do: fix whole repo');\r",
    "23:       return [];\r",
    "24:     } else {\r",
    "25:       throw new Error('No API Key found');\r",
    "26:     }\r",
    "27:   } catch (error) {\r",
    "28:     console.log('Error getting suggestions for the Repo: ' + error);\r",
    "29:   }\r",
    "30: }\r",
    "31: \r",
    "32: export { fixRepo };\r",
    "33: "
  ],
  "src\\utils\\check.ts": [
    "1: import * as fs from 'fs';\r",
    "2: import {\r",
    "3:   getConfig,\r",
    "4:   DIR_PATH,\r",
    "5:   LATEST_RUN_PATH,\r",
    "6:   createNewRun,\r",
    "7: } from '@/helpers/config';\r",
    "8: import path from 'path';\r",
    "9: import { analyse } from '@/helpers/Axecore';\r",
    "10: import { getUploadingFiles, runCodeScan } from '@/helpers/CodeBaseScan';\r",
    "11: import { createfileLineBreakdown } from '@/helpers/FileLineBreakdown';\r",
    "12: import { getRepoSuggestions } from '@/helpers/ModelHandler';\r",
    "13: import * as dotenv from 'dotenv';\r",
    "14: \r",
    "15: dotenv.config();\r",
    "16: \r",
    "17: export async function check(flag?: string) {\r",
    "18:   try {\r",
    "19:     const _config = await getConfig();\r",
    "20: \r",
    "21:     if (!_config) {\r",
    "22:       throw new Error('Something wrong with configuration file');\r",
    "23:     }\r",
    "24: \r",
    "25:     const { timestamp, newRunPath } = createNewRun();\r",
    "26: \r",
    "27:     // analyse to get axe-core score and violations\r",
    "28:     // const results = await analyse(_config?.framework, newRunPath, timestamp);\r",
    "29: \r",
    "30:     const filePaths = await runCodeScan();\r",
    "31: \r",
    "32:     const fileLineBreakdownPath = createfileLineBreakdown(\r",
    "33:       filePaths,\r",
    "34:       newRunPath,\r",
    "35:       timestamp,\r",
    "36:     );\r",
    "37: \r",
    "38:     console.log('Getting suggestions...');\r",
    "39:     const suggestions = await getRepoSuggestions(fileLineBreakdownPath);\r",
    "40: \r",
    "41:     // if (flag === 'score') {\r",
    "42:     //   return results.score;\r",
    "43:     // }\r",
    "44: \r",
    "45:     if (flag === 'report') {\r",
    "46:       // Write suggestions to guidedog folder\r",
    "47:       fs.writeFileSync(\r",
    "48:         `${DIR_PATH}/suggestions.json`,\r",
    "49:         JSON.stringify(suggestions, null, 2),\r",
    "50:         {\r",
    "51:           encoding: 'utf8',\r",
    "52:           flag: 'w',\r",
    "53:         },\r",
    "54:       );\r",
    "55: \r",
    "56:       // Write suggestions to latest run for historical purposes\r",
    "57:       fs.writeFileSync(\r",
    "58:         `${LATEST_RUN_PATH}/suggestions.json`,\r",
    "59:         JSON.stringify(suggestions, null, 2),\r",
    "60:         {\r",
    "61:           encoding: 'utf8',\r",
    "62:           flag: 'w',\r",
    "63:         },\r",
    "64:       );\r",
    "65:     }\r",
    "66: \r",
    "67:     return suggestions;\r",
    "68:   } catch (error) {\r",
    "69:     throw error;\r",
    "70:   }\r",
    "71: }\r",
    "72: "
  ],
  "src\\helpers\\readIgnore.ts": [
    "1: import fs from 'fs';\r",
    "2: import path from 'path';\r",
    "3: \r",
    "4: export function readIgnore() {\r",
    "5:   const ignorePath = path.join(process.cwd(), '.guidedogignore');\r",
    "6: \r",
    "7:   try {\r",
    "8:     const data = fs.readFileSync(ignorePath, 'utf-8');\r",
    "9: \r",
    "10:     const ignorePatterns = data\r",
    "11:       .split('\\n')\r",
    "12:       .map((line) => line.trim())\r",
    "13:       .filter((line) => line && !line.startsWith('#')); // Filter out empty lines and comments\r",
    "14: \r",
    "15:     return ignorePatterns;\r",
    "16:   } catch (error) {\r",
    "17:     return [];\r",
    "18:   }\r",
    "19: }\r",
    "20: "
  ],
  "src\\helpers\\OpenaiClient.ts": [
    "1: import OpenAI from 'openai';\r",
    "2: \r",
    "3: let openaiClient: OpenAI | null = null;\r",
    "4: \r",
    "5: export function createOpenAIClient(): OpenAI {\r",
    "6:   try {\r",
    "7:     if (!openaiClient) {\r",
    "8:       const apiKey = process.env.OPENAI_API_KEY || undefined;\r",
    "9: \r",
    "10:       if (!apiKey) {\r",
    "11:         throw new Error('API Key cannot be found');\r",
    "12:       }\r",
    "13: \r",
    "14:       openaiClient = new OpenAI({ apiKey });\r",
    "15:     } else {\r",
    "16:       console.log('OpenAI client already initialized.');\r",
    "17:     }\r",
    "18:     return openaiClient;\r",
    "19:   } catch (error) {\r",
    "20:     throw error;\r",
    "21:   }\r",
    "22: }\r",
    "23: \r",
    "24: export function getOpenAIClient(): OpenAI {\r",
    "25:   if (!openaiClient) {\r",
    "26:     openaiClient = createOpenAIClient();\r",
    "27:   }\r",
    "28: \r",
    "29:   return openaiClient;\r",
    "30: }\r",
    "31: "
  ],
  "src\\helpers\\ModelHandler.ts": [
    "1: import * as fs from 'fs';\r",
    "2: import { getOpenAIClient } from './OpenaiClient';\r",
    "3: import { z } from 'zod';\r",
    "4: import { zodResponseFormat } from 'openai/helpers/zod.mjs';\r",
    "5: import { DIR_PATH } from './config';\r",
    "6: \r",
    "7: const ResponseFormat = z.object({\r",
    "8:   suggestions: z.array(\r",
    "9:     z.object({\r",
    "10:       fileName: z.string(),\r",
    "11:       issues: z.array(\r",
    "12:         z.object({\r",
    "13:           lineNumber: z.number(),\r",
    "14:           impact: z.enum(['critical', 'serious', 'moderate', 'minor']),\r",
    "15:           type: z.string(),\r",
    "16:           improvement: z.string(),\r",
    "17:         }),\r",
    "18:       ),\r",
    "19:     }),\r",
    "20:   ),\r",
    "21: });\r",
    "22: \r",
    "23: export async function getRepoSuggestions(fileLineBreakdownPath: string) {\r",
    "24:   try {\r",
    "25:     const openai = getOpenAIClient();\r",
    "26: \r",
    "27:     const files_data = fs.readFileSync(fileLineBreakdownPath, 'utf8');\r",
    "28:     const wcag_data = fs.readFileSync(`${DIR_PATH}/wcag.json`, 'utf8');\r",
    "29: \r",
    "30:     const prompt = `I am providing you two json files. The first is a line by line breakdown of every front end related file in my codebase. This file is in the format of:\r",
    "31:           {\r",
    "32:             \"fileName\": [\r",
    "33:               \"line 1\",\r",
    "34:               \"line 2\",\r",
    "35:               \"line 3\",\r",
    "36:               ...\r",
    "37:             ]\r",
    "38:           } for each file in my codebase. each line represents the exact line of code except for the first characters which indicate the line number, colon and one space e.g. \"3: \" is line 3 in the file.\r",
    "39: \r",
    "40:           From this input data, please use identify any accessibility issues in the codebase according to WCAG 2.2 guidelines. Provide suggestions for code improvements based on the issues identified. Ensure that the suggestions are accurate and adhere to accessibility best practices. \r",
    "41: \r",
    "42:           The second json file you will receive is the WCAG 2.2 guidelines. Please use these to inform the suggestions you provide.\r",
    "43: \r",
    "44:           Your task is to:\r",
    "45:           1. Read through the upcoming json file and identify accessibility issues according to WCAG 2.2 guidelines.\r",
    "46:             - Contextualize your analysis by reviewing the entire file, considering how different elements interact and how they might affect accessibility.\r",
    "47:           2. Provide solutions based on the issues identified, suggest accurate code improvements.\r",
    "48:             - Locate the issue: Each issue must have a valid line number\".\r",
    "49:             - Resolve the issue: Provide one single solution per issue. \r",
    "50:             - Skip: If you cannot map or resolve an issue, skip it without generating a solution.\r",
    "51:             - If the issue can be resolved with a single line of code, provide the original line, not placeholder text (e.g., \"...\").\r",
    "52:             - Do not do multi line fixes. Just provide the exact line of code that needs to be fixed. You can do multiple suggestions for the same file just one line at a time.\r",
    "53:             - Ensure that the suggested improvements are functional and adhere to accessibility best practices and correctness.\r",
    "54:             - If no definitive improvement can be made, provide a message with relevant keywords for users to search and resolve the issue manually.\r",
    "55:             - The suggestion should be the exact code and nothing else. The code provided is going to replace the exact line of the identified issue. So please ensure you provide the exact code that should replace the line.\r",
    "56:             - For any quotes required in the suggestion please use single quotes. Do not try to use escape characters as this breaks the response for us. \r",
    "57:             - For the type of issue, use the exact title of the issue as per the WCAG 2.2 guidelines.\r",
    "58:           3. Before returning the suggestions, validate the suggestions and modify them accordingly if not pass any of these validation criteria:\r",
    "59:             - Validate that the suggestions consider the surrounding code context. This includes ensuring that conditional rendering, variable states, and the overall structure of the component or file are taken into account.\r",
    "60:             - Suggestions should not introduce new bugs or alter the intended behavior of the application.\r",
    "61:             - Ensure that the improvements adhere to established accessibility guidelines WCAG 2.2\r",
    "62:             - Validate that the suggested changes do not negatively affect the visual presentation or user experience.\r",
    "63:           4. Strictly return a valid JSON, with no extra explanation, text, code block delimiters, or newlines. The JSON should be an array of objects, where each object represents a file with accessibility issues.\r",
    "64:           5. You must do this for every file provided. There are often multiple files needing accessibility improvements.\r",
    "65: \r",
    "66:           The output must be strictly following this structure:\r",
    "67:           [\r",
    "68:             {\r",
    "69:               fileName:string, //  The name of file having issues\r",
    "70:               issues: [ // An array of objects, where each object represents an issue in the file\r",
    "71:                 {\r",
    "72:                   location: number, // The exact line of the issue.\r",
    "73:                   impact: string, // The severity of the issue based on axe-core's analysis.\r",
    "74:                   type: string, // The type/title of accessibility issue, based on predefined WCAG guidelines.\r",
    "75:                   improvement: string // The suggested code improvement to fix the issue.\r",
    "76:                 }\r",
    "77:               ]\r",
    "78:             }\r",
    "79:           ]\r",
    "80: \r",
    "81:           HERE IS THE JSON FILE OF THE WCAG 2.2 GUIDELINES:\r",
    "82: \r",
    "83:           ${wcag_data}\r",
    "84: \r",
    "85:           HERE IS THE JSON FILE OF THE LINE BY LINE BREAKDOWN OF MY CODEBASE:\r",
    "86: \r",
    "87:           ${files_data}\r",
    "88:         `;\r",
    "89: \r",
    "90:     const completion = await openai.beta.chat.completions.parse({\r",
    "91:       model: 'gpt-4o-mini',\r",
    "92:       messages: [\r",
    "93:         {\r",
    "94:           role: 'system',\r",
    "95:           content:\r",
    "96:             'You are an expert frontend developer in ReactJS, VueJS, Angular and Web accessibility and tasked with helping me improve the accessibility of my frontend code according to WCAG 2.2 guidelines.',\r",
    "97:         },\r",
    "98:         { role: 'user', content: prompt },\r",
    "99:       ],\r",
    "100:       response_format: zodResponseFormat(ResponseFormat, 'response_format'),\r",
    "101:     });\r",
    "102: \r",
    "103:     const suggestions = completion?.choices[0]?.message.parsed;\r",
    "104: \r",
    "105:     if (!suggestions) {\r",
    "106:       throw new Error('No suggestions were generated.');\r",
    "107:     }\r",
    "108: \r",
    "109:     const formattedSuggestions = sanitizeSuggestions(suggestions);\r",
    "110: \r",
    "111:     return formattedSuggestions;\r",
    "112:   } catch (error) {\r",
    "113:     throw error;\r",
    "114:   }\r",
    "115: }\r",
    "116: \r",
    "117: // This function sanitize the suggestions. This is to improve consistency of format and can be expanded on over time.\r",
    "118: const sanitizeSuggestions = (suggestionFile: any) => {\r",
    "119:   return suggestionFile.suggestions.map((file: any) => ({\r",
    "120:     ...file,\r",
    "121:     issues: file.issues.map((issue: any) => ({\r",
    "122:       ...issue,\r",
    "123:       // Replace double quotes and escape chars with single quotes\r",
    "124:       improvement: issue.improvement\r",
    "125:         .replace(/\"/g, \"'\")\r",
    "126:         .replace(/\\\\\"/g, \"'\")\r",
    "127:         .trim(),\r",
    "128:     })),\r",
    "129:   }));\r",
    "130: };\r",
    "131: "
  ],
  "src\\helpers\\FileLineBreakdown.ts": [
    "1: // src/helpers/createfileLineBreakdown.ts\r",
    "2: import path from 'path';\r",
    "3: import * as fs from 'fs';\r",
    "4: \r",
    "5: export function createfileLineBreakdown(\r",
    "6:   filePaths: string[],\r",
    "7:   runPath: string,\r",
    "8:   timestamp: string,\r",
    "9: ): string {\r",
    "10:   const fileLineBreakdown: { [key: string]: string[] } = {}; // Initialize as an object\r",
    "11: \r",
    "12:   try {\r",
    "13:     for (const filePath of filePaths) {\r",
    "14:       const content: string = fs.readFileSync(filePath, 'utf8'); // Read file as string\r",
    "15:       const code = content.split('\\n');\r",
    "16:       fileLineBreakdown[filePath] = code.map(\r",
    "17:         (line, index) => `${index + 1}: ${line}`,\r",
    "18:       );\r",
    "19:     }\r",
    "20: \r",
    "21:     if (!fs.existsSync(runPath)) {\r",
    "22:       fs.mkdirSync(runPath, { recursive: true });\r",
    "23:     }\r",
    "24: \r",
    "25:     // Write the mega file to the src directory\r",
    "26:     const outputPath = path.join(runPath, `files-${timestamp}.json`);\r",
    "27: \r",
    "28:     fs.writeFileSync(\r",
    "29:       outputPath,\r",
    "30:       JSON.stringify(fileLineBreakdown, null, 2),\r",
    "31:       'utf8',\r",
    "32:     );\r",
    "33: \r",
    "34:     return outputPath;\r",
    "35:   } catch (error) {\r",
    "36:     throw error;\r",
    "37:   }\r",
    "38: }\r",
    "39: "
  ],
  "src\\helpers\\config.ts": [
    "1: import { OpenAI } from 'openai';\r",
    "2: import * as fs from 'fs';\r",
    "3: import path from 'path';\r",
    "4: import _ from 'lodash';\r",
    "5: import wcag from '@/data/wcag.json';\r",
    "6: import { pathToFileURL } from 'url';  // Add this import\r",
    "7: \r",
    "8: interface IConfig {\r",
    "9:   framework?: string;\r",
    "10:   assistantId?: string;\r",
    "11:   contextId?: string;\r",
    "12:   rules?: any;\r",
    "13: }\r",
    "14: \r",
    "15: export const DIR_PATH = path.join(process.cwd(), '.guidedog');\r",
    "16: export const CONFIG_PATH = path.join(DIR_PATH, 'guidedog.config.cjs');\r",
    "17: export const RUNS_PATH = path.join(DIR_PATH, 'runs');\r",
    "18: export let LATEST_RUN_PATH = '';\r",
    "19: \r",
    "20: export async function initConfig(_config: IConfig) {\r",
    "21:   try {\r",
    "22:     if (!fs.existsSync(DIR_PATH)) {\r",
    "23:       fs.mkdirSync(DIR_PATH);\r",
    "24:     }\r",
    "25: \r",
    "26:     if (fs.existsSync(CONFIG_PATH)) {\r",
    "27:       let configObj = await import(pathToFileURL(CONFIG_PATH).href);\r",
    "28:       configObj = _.merge(configObj.default, _config); // Deep merge the configurations\r",
    "29: \r",
    "30:       fs.writeFileSync(\r",
    "31:         CONFIG_PATH,\r",
    "32:         `module.exports = ${JSON.stringify(configObj, null, 2)};`,\r",
    "33:       );\r",
    "34:     } else {\r",
    "35:       // Write the new config object to the file\r",
    "36:       fs.writeFileSync(\r",
    "37:         CONFIG_PATH,\r",
    "38:         `module.exports = ${JSON.stringify(_config, null, 2)};`,\r",
    "39:         { encoding: 'utf-8' },\r",
    "40:       );\r",
    "41:     }\r",
    "42: \r",
    "43:     fs.writeFileSync(path.join(DIR_PATH, 'wcag.json'), JSON.stringify(wcag), {\r",
    "44:       encoding: 'utf-8',\r",
    "45:     });\r",
    "46:   } catch (error) {\r",
    "47:     throw error;\r",
    "48:   }\r",
    "49: }\r",
    "50: \r",
    "51: export const getConfig = async (): Promise<IConfig> => {\r",
    "52:   try {\r",
    "53:     const _config: IConfig = (await import(pathToFileURL(CONFIG_PATH).href)).default;  // Updated\r",
    "54: \r",
    "55:     if (!_config) {\r",
    "56:       throw new Error('Configuration file can not be found');\r",
    "57:     }\r",
    "58: \r",
    "59:     return _config;\r",
    "60:   } catch (error) {\r",
    "61:     throw error;\r",
    "62:   }\r",
    "63: };\r",
    "64: \r",
    "65: export async function updateConfig(\r",
    "66:   assistant: OpenAI.Beta.Assistants.Assistant,\r",
    "67: ) {\r",
    "68:   // Read existing config or create a new one\r",
    "69:   let config: { assistantId: string } = { assistantId: '' }; // TODO: make this a proper config object\r",
    "70: \r",
    "71:   try {\r",
    "72:     const existingConfig = fs.readFileSync(CONFIG_PATH, {\r",
    "73:       encoding: 'utf8',\r",
    "74:     });\r",
    "75:     config = JSON.parse(existingConfig);\r",
    "76:     // Append assistantId to the config\r",
    "77:     config['assistantId'] = assistant.id;\r",
    "78: \r",
    "79:     // Write the updated config back to the file\r",
    "80:     fs.writeFileSync(\r",
    "81:       DIR_PATH,\r",
    "82:       `module.exports = ${JSON.stringify(config, null, 2)};`,\r",
    "83:       'utf8',\r",
    "84:     );\r",
    "85:     console.log('Configuration saved to .guidedog/guidedog.config.cjs');\r",
    "86:   } catch (error) {\r",
    "87:     console.log('No existing config found, creating a new one.');\r",
    "88:   }\r",
    "89: }\r",
    "90: \r",
    "91: export function createNewRun() {\r",
    "92:   // .toJSON is an easy way to give us YYYY-MM-DD-${time} format to avoid using '/'s as that causes issues for path names\r",
    "93:   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r",
    "94: \r",
    "95:   const newRunPath = path.join(\r",
    "96:     process.cwd(),\r",
    "97:     `.guidedog/runs/run-${timestamp}`,\r",
    "98:   );\r",
    "99: \r",
    "100:   try {\r",
    "101:     if (!fs.existsSync(newRunPath)) {\r",
    "102:       fs.mkdirSync(newRunPath, { recursive: true });\r",
    "103:     } else {\r",
    "104:       console.log(\r",
    "105:         'Run path already exists for this exact time. Returning existing run path.',\r",
    "106:       );\r",
    "107:     }\r",
    "108: \r",
    "109:     LATEST_RUN_PATH = newRunPath;\r",
    "110: \r",
    "111:     return { timestamp, newRunPath };\r",
    "112:   } catch (error) {\r",
    "113:     throw error;\r",
    "114:   }\r",
    "115: }\r",
    "116: \r",
    "117: export async function saveAPIKey(apiKey: string) {\r",
    "118:   const envPath = path.join(process.cwd(), '.env');\r",
    "119:   const apiKeyEntry = `OPENAI_API_KEY=${apiKey}`;\r",
    "120: \r",
    "121:   if (fs.existsSync(envPath)) {\r",
    "122:     const fileContents = fs.readFileSync(envPath, { encoding: 'utf8' });\r",
    "123: \r",
    "124:     if (fileContents.includes('OPENAI_API_KEY=')) {\r",
    "125:       const updatedContents = fileContents.replace(\r",
    "126:         /OPENAI_API_KEY=.*/,\r",
    "127:         apiKeyEntry,\r",
    "128:       );\r",
    "129:       fs.writeFileSync(envPath, updatedContents, { encoding: 'utf8' });\r",
    "130:       console.log('API key updated in .env file.');\r",
    "131:     } else {\r",
    "132:       fs.appendFileSync(envPath, `\\n${apiKeyEntry}`, { encoding: 'utf8' });\r",
    "133:       console.log('API key appended to .env file.');\r",
    "134:     }\r",
    "135:   } else {\r",
    "136:     // Create a new .env file and add the API key\r",
    "137:     fs.writeFileSync(envPath, apiKeyEntry, { encoding: 'utf8' });\r",
    "138:     console.log('.env file created and API key added.');\r",
    "139:   }\r",
    "140: }\r",
    "141: "
  ],
  "src\\helpers\\CodeBaseScan.ts": [
    "1: import { glob } from 'glob';\r",
    "2: import { readIgnore } from '@/helpers/readIgnore';\r",
    "3: import { RUNS_PATH, DIR_PATH } from './config';\r",
    "4: \r",
    "5: export async function runCodeScan(): Promise<string[]> {\r",
    "6:   console.log('Scanning...');\r",
    "7:   const _ignore = readIgnore();\r",
    "8:   try {\r",
    "9:     const patterns = [\r",
    "10:       `**/*.{js,jsx,ts,tsx,html,htm,xhtml,css,scss,less,vue,svelte}`,\r",
    "11:     ];\r",
    "12:     const filePaths = await glob(patterns, {\r",
    "13:       ignore: [\r",
    "14:         ..._ignore,\r",
    "15:         'node_modules/**',\r",
    "16:         '*.json',\r",
    "17:         '.next/**',\r",
    "18:         'dist/**',\r",
    "19:         'build/**',\r",
    "20:         'public/**',\r",
    "21:       ],\r",
    "22:     });\r",
    "23: \r",
    "24:     console.log('Scanning completed');\r",
    "25:     return filePaths;\r",
    "26:   } catch (error) {\r",
    "27:     throw error;\r",
    "28:   }\r",
    "29: }\r",
    "30: \r",
    "31: export async function getUploadingFiles(timestamp: string): Promise<string[]> {\r",
    "32:   try {\r",
    "33:     const patterns = [\r",
    "34:       `${DIR_PATH}/wcag.json`,\r",
    "35:       `${RUNS_PATH}/run-${timestamp}/*`,\r",
    "36:     ];\r",
    "37: \r",
    "38:     const filePaths = await glob(patterns);\r",
    "39: \r",
    "40:     if (filePaths.length <= 1) {\r",
    "41:       throw new Error('Missing uploading files!');\r",
    "42:     }\r",
    "43: \r",
    "44:     return filePaths;\r",
    "45:   } catch (error) {\r",
    "46:     throw error;\r",
    "47:   }\r",
    "48: }\r",
    "49: "
  ],
  "src\\helpers\\Axecore.ts": [
    "1: import { AxePuppeteer } from '@axe-core/puppeteer';\r",
    "2: import puppeteer from 'puppeteer';\r",
    "3: import { exec } from 'child_process';\r",
    "4: import path from 'path';\r",
    "5: import * as fs from 'fs';\r",
    "6: \r",
    "7: const retry = async (\r",
    "8:   url: string,\r",
    "9:   resolve: any,\r",
    "10:   retries: number = 5,\r",
    "11:   delay: number = 5000,\r",
    "12: ) => {\r",
    "13:   for (let attempt = 0; attempt < retries; attempt++) {\r",
    "14:     try {\r",
    "15:       await new Promise((res) => setTimeout(res, delay));\r",
    "16: \r",
    "17:       const response = await fetch(url);\r",
    "18: \r",
    "19:       if (response.ok) {\r",
    "20:         console.log('Build is up and running.');\r",
    "21:         resolve();\r",
    "22:         return;\r",
    "23:       } else {\r",
    "24:         console.log(\r",
    "25:           `Serving attempt ${attempt + 1} failed: Server is not up yet. Retrying...`,\r",
    "26:         );\r",
    "27:       }\r",
    "28:     } catch (error) {\r",
    "29:       throw new Error(\r",
    "30:         `Serving attempt ${attempt + 1} failed: ${error}. Retrying...`,\r",
    "31:       );\r",
    "32:     }\r",
    "33:   }\r",
    "34: \r",
    "35:   throw new Error(`Server failed to start after ${retries} attempts.`);\r",
    "36: };\r",
    "37: \r",
    "38: const build = async (cmd: string) =>\r",
    "39:   new Promise<void>((resolve, reject) => {\r",
    "40:     exec(cmd, (error, stdout, stderr) => {\r",
    "41:       if (error) {\r",
    "42:         return reject(`Build error: ${error}`);\r",
    "43:       }\r",
    "44:       if (stderr) {\r",
    "45:         return reject(`Build stderr: ${stderr}`);\r",
    "46:       }\r",
    "47:       console.log(`Build stdout: ${stdout}`);\r",
    "48:       resolve();\r",
    "49:     });\r",
    "50:   });\r",
    "51: \r",
    "52: const serveBuild = async (cmd: string) =>\r",
    "53:   new Promise<{ serveProcess: any }>((resolve, reject) => {\r",
    "54:     const serveProcess = exec(cmd, (error, stdout, stderr) => {\r",
    "55:       if (error) {\r",
    "56:         return reject(`Serve error: ${error}`);\r",
    "57:       }\r",
    "58:       if (stderr) {\r",
    "59:         return reject(`Serve stderr: ${stderr}`);\r",
    "60:       }\r",
    "61:       console.log(`Serve stdout: ${stdout}`);\r",
    "62:     });\r",
    "63: \r",
    "64:     const url = 'http://localhost:3000/';\r",
    "65:     retry(url, () => resolve({ serveProcess })).catch(reject);\r",
    "66:   });\r",
    "67: \r",
    "68: const stopProcess = (runningProcess: any) => {\r",
    "69:   try {\r",
    "70:     process.kill(runningProcess.pid + 1, 'SIGTERM');\r",
    "71:   } catch (error) {\r",
    "72:     throw new Error(`Error stopping the server: ${error}`);\r",
    "73:   }\r",
    "74: };\r",
    "75: \r",
    "76: export const analyse = async (\r",
    "77:   framework: string | undefined,\r",
    "78:   runPath: string,\r",
    "79:   timestamp: string,\r",
    "80: ) => {\r",
    "81:   let serveProcess;\r",
    "82: \r",
    "83:   try {\r",
    "84:     if (!framework) throw new Error('guidedog.config.cjs cannot be found');\r",
    "85: \r",
    "86:     switch (framework) {\r",
    "87:       case 'React':\r",
    "88:         await build('npm run build');\r",
    "89:         ({ serveProcess } = await serveBuild('npx serve -s build -p 3000'));\r",
    "90:         break;\r",
    "91:       case 'Vue':\r",
    "92:         await build('npx vite build');\r",
    "93:         ({ serveProcess } = await serveBuild('npx serve -s dist -p 3000'));\r",
    "94:         break;\r",
    "95:       case 'Angular':\r",
    "96:         // await build('npx ng build');\r",
    "97:         ({ serveProcess } = await serveBuild('npx ng serve --port 3000'));\r",
    "98:         break;\r",
    "99:       default:\r",
    "100:         throw new Error('Unsupported framework');\r",
    "101:     }\r",
    "102: \r",
    "103:     const browser = await puppeteer.launch();\r",
    "104:     const page = await browser.newPage();\r",
    "105:     await page.goto(`http://localhost:3000`);\r",
    "106: \r",
    "107:     const results = await new AxePuppeteer(page).analyze();\r",
    "108: \r",
    "109:     let p2 = 0; // Critical and Serious issues\r",
    "110:     let p1 = 0; // Moderate issues\r",
    "111:     let p0 = 0; // Minor issues\r",
    "112: \r",
    "113:     // Count issues by impact\r",
    "114:     results.violations.forEach((violation) => {\r",
    "115:       switch (violation.impact) {\r",
    "116:         case 'critical':\r",
    "117:         case 'serious':\r",
    "118:           p2 += violation.nodes.length;\r",
    "119:           break;\r",
    "120:         case 'moderate':\r",
    "121:           p1 += violation.nodes.length;\r",
    "122:           break;\r",
    "123:         case 'minor':\r",
    "124:           p0 += violation.nodes.length;\r",
    "125:           break;\r",
    "126:       }\r",
    "127:     });\r",
    "128: \r",
    "129:     // Calculate the raw score\r",
    "130:     const rawScore = ((0.4 * p2 + 0.8 * p1 + p0) / (p1 + p2 + p0)).toFixed(2);\r",
    "131: \r",
    "132:     // Optionally weight the score\r",
    "133:     const weightedScore = 500 + parseFloat(rawScore) * 500.0;\r",
    "134:     console.log(`minor: ${p0} | moderate: ${p1} | critical: ${p2}`);\r",
    "135:     console.log(`Raw score: ${rawScore} | Weighted score: ${weightedScore}`);\r",
    "136: \r",
    "137:     const score = {\r",
    "138:       rawScore,\r",
    "139:       weightedScore,\r",
    "140:       serious: p2,\r",
    "141:       moderate: p1,\r",
    "142:       minor: p0,\r",
    "143:     };\r",
    "144: \r",
    "145:     const axeResults = {\r",
    "146:       testEngine: results.testEngine,\r",
    "147:       testEnvironment: results.testEnvironment,\r",
    "148:       timeStamp: results.timestamp,\r",
    "149:       url: results.url,\r",
    "150:       violation: results.violations,\r",
    "151:     };\r",
    "152: \r",
    "153:     await browser.close();\r",
    "154: \r",
    "155:     fs.writeFileSync(\r",
    "156:       path.join(runPath, `axecore-${timestamp}.json`),\r",
    "157:       JSON.stringify(axeResults, null, 2),\r",
    "158:       'utf8',\r",
    "159:     );\r",
    "160: \r",
    "161:     return { score, axeResults };\r",
    "162:   } catch (error) {\r",
    "163:     throw error;\r",
    "164:   } finally {\r",
    "165:     if (serveProcess) {\r",
    "166:       stopProcess(serveProcess);\r",
    "167:     }\r",
    "168:   }\r",
    "169: };\r",
    "170: "
  ]
}
