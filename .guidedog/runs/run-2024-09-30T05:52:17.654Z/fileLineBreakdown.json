{
  "tsup.config.ts": [
    "1: import { defineConfig } from 'tsup';",
    "2: ",
    "3: export default defineConfig({",
    "4:   entryPoints: ['src/index.ts', 'src/cli.ts'], // Include cli.ts",
    "5:   format: ['cjs', 'esm'],",
    "6:   dts: true,",
    "7:   outDir: 'dist',",
    "8:   clean: true,",
    "9: });",
    "10: "
  ],
  "tsup.config.js": [
    "1: import { defineConfig } from 'tsup';",
    "2: export default defineConfig({",
    "3:   entryPoints: ['src/index.ts'],",
    "4:   format: ['cjs', 'esm'],",
    "5:   dts: true,",
    "6:   outDir: 'dist',",
    "7:   clean: true,",
    "8: });",
    "9: //# sourceMappingURL=tsup.config.js.map",
    "10: "
  ],
  "tsup.config.d.ts": [
    "1: declare const _default:",
    "2:   | import('tsup').Options",
    "3:   | import('tsup').Options[]",
    "4:   | ((",
    "5:       overrideOptions: import('tsup').Options,",
    "6:     ) =>",
    "7:       | import('tsup').Options",
    "8:       | import('tsup').Options[]",
    "9:       | Promise<import('tsup').Options | import('tsup').Options[]>);",
    "10: export default _default;",
    "11: //# sourceMappingURL=tsup.config.d.ts.map",
    "12: "
  ],
  "TestFiles/missingformlabels.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>Missing Form Labels</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <h1>Form Without Labels</h1>",
    "10:     <form>",
    "11:       <input type=\"text\" placeholder=\"Enter your name\" />",
    "12:       <input type=\"email\" placeholder=\"Enter your email\" />",
    "13:       <button type=\"submit\">Submit</button>",
    "14:     </form>",
    "15:   </body>",
    "16: </html>",
    "17: "
  ],
  "TestFiles/missingbutton.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>Empty Button Label</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <h1>Button with No Label</h1>",
    "10:     <button aria-label=\"\">Click me</button>",
    "11:   </body>",
    "12: </html>",
    "13: "
  ],
  "TestFiles/htmlsample.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>Sample Plain HTML</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <h1>Welcome to Our Website</h1>",
    "10:     <p>This is a sample paragraph with some <a href=\"#\">links</a>.</p>",
    "11:     <img src=\"image.jpg\" alt=\"\" />",
    "12:     <button onclick=\"alert('Button clicked!')\">Click me</button>",
    "13:     <input type=\"text\" placeholder=\"Type here\" />",
    "14:   </body>",
    "15: </html>",
    "16: "
  ],
  "TestFiles/ariaissue.html": [
    "1: <!doctype html>",
    "2: <html lang=\"en\">",
    "3:   <head>",
    "4:     <meta charset=\"UTF-8\" />",
    "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "6:     <title>ARIA Sample</title>",
    "7:   </head>",
    "8:   <body>",
    "9:     <div role=\"navigation\">",
    "10:       <a href=\"#\" role=\"button\">Link as Button</a>",
    "11:     </div>",
    "12:     <div aria-hidden=\"true\">",
    "13:       <h2>This heading is hidden from assistive technologies</h2>",
    "14:     </div>",
    "15:     <button aria-label=\"\">No label here</button>",
    "16:   </body>",
    "17: </html>",
    "18: "
  ],
  "TestFiles/angularsample.ts": [
    "1: // import { Component } from '@angular/core';",
    "2: ",
    "3: // @Component({",
    "4: //   selector: 'app-sample',",
    "5: //   template: `",
    "6: //     <h2>Angular Sample Component</h2>",
    "7: //     <img src=\"example.png\" alt=\"\">",
    "8: //     <button (click)=\"onClick()\">Submit</button>",
    "9: //     <input type=\"text\" placeholder=\"Search...\">",
    "10: //     <p>This paragraph has <a href=\"#\">a link</a>.</p>",
    "11: //   `",
    "12: // })",
    "13: // export class SampleComponent {",
    "14: //   onClick() {",
    "15: //     alert('Form submitted!');",
    "16: //   }",
    "17: // }",
    "18: "
  ],
  "src/utils.ts": [
    "1: import { OpenAI } from 'openai';",
    "2: import * as fs from 'fs/promises';",
    "3: import { exec } from 'child_process';",
    "4: import readline from 'readline';",
    "5: import { AxePuppeteer } from '@axe-core/puppeteer';",
    "6: import puppeteer from 'puppeteer';",
    "7: ",
    "8: interface ImproveSemanticsOptions {",
    "9:   htmlFilePath: string;",
    "10:   openAIApiKey: string;",
    "11:   openAIModel?: string;",
    "12:   openVSCode?: boolean;",
    "13: }",
    "14: ",
    "15: //Old Functions",
    "16: async function improveHtmlSemantics({",
    "17:   htmlFilePath,",
    "18:   openAIApiKey,",
    "19:   openAIModel = 'gpt-4o-mini',",
    "20:   openVSCode = true,",
    "21: }: ImproveSemanticsOptions): Promise<string> {",
    "22:   const client = new OpenAI({ apiKey: openAIApiKey });",
    "23: ",
    "24:   try {",
    "25:     const htmlContent = await fs.readFile(htmlFilePath, 'utf8');",
    "26: ",
    "27:     const prompt = `Please make the following HTML more semantic and accessible. Consider using header tags instead of just <p> or using <section>/<article> instead of <div> where appropriate. Do not response with any other words or content EXCEPT for the html code. This is extremely important. The file returned should be runnable as HTML code. E.g. shouldn't include dash tags. The first and final tag should be the first and final tag provided by the original html content e.g. <!doctype html>. Please do not write backticks at the start or end. e.g. backtick backtick backtick html which is commonly used by ai to display code nicely. please dont do this. Here is the HTML content:\\n\\n${htmlContent}`;",
    "28: ",
    "29:     const completion = await client.chat.completions.create({",
    "30:       model: openAIModel,",
    "31:       messages: [",
    "32:         {",
    "33:           role: 'system',",
    "34:           content:",
    "35:             'You are a front-end developer that is an expert in semantic HTML. You are helping a colleague improve the semantic structure of their HTML code to make it more accessible. You are not allowed to change any content or words in the HTML code except for the HTML tags and the attributes of those tags. You can also add new tags or attributes where necessary.',",
    "36:         },",
    "37:         { role: 'user', content: prompt },",
    "38:       ],",
    "39:     });",
    "40: ",
    "41:     const improvedHtml = completion.choices?.[0]?.message?.content || '';",
    "42: ",
    "43:     if (!improvedHtml) {",
    "44:       throw new Error('No improved HTML was returned.');",
    "45:     }",
    "46: ",
    "47:     await fs.writeFile(htmlFilePath, improvedHtml, 'utf8');",
    "48: ",
    "49:     console.log(`The file ${htmlFilePath} has been updated successfully.`);",
    "50: ",
    "51:     if (openVSCode) {",
    "52:       exec(`git difftool ${htmlFilePath}`, (error, stdout, stderr) => {",
    "53:         if (error) {",
    "54:           console.log(",
    "55:             'Failed to open VSCode with git difftool. Make sure git is installed and configured correctly.',",
    "56:           );",
    "57:           return;",
    "58:         }",
    "59:         if (stderr) {",
    "60:           console.log(`stderr: ${stderr}`);",
    "61:           return;",
    "62:         }",
    "63:         console.log(",
    "64:           `Opened working tree changes for ${htmlFilePath} in VSCode.`,",
    "65:         );",
    "66:       });",
    "67:     }",
    "68: ",
    "69:     return improvedHtml;",
    "70:   } catch (error) {",
    "71:     console.error('An error occurred:', error);",
    "72:     throw error;",
    "73:   }",
    "74: }",
    "75: ",
    "76: async function improveSemantics(htmlFilePath: string, openAIApiKey: string) {",
    "77:   try {",
    "78:     const improvedHtml = await improveHtmlSemantics({",
    "79:       htmlFilePath,",
    "80:       openAIApiKey,",
    "81:       openAIModel: 'gpt-4o-mini',",
    "82:       openVSCode: true,",
    "83:     });",
    "84: ",
    "85:     console.log('HTML semantics improved successfully.');",
    "86:   } catch (error) {",
    "87:     console.error('Error improving HTML:', error);",
    "88:   }",
    "89: }",
    "90: ",
    "91: const assessAccessibility = async (flag: boolean) => {",
    "92:   const browser = await puppeteer.launch();",
    "93:   const page = await browser.newPage();",
    "94:   await page.goto(`http://localhost:3000`);",
    "95: ",
    "96:   const results = await new AxePuppeteer(page).analyze();",
    "97: ",
    "98:   let p2 = 0; // Critical and Serious issues",
    "99:   let p1 = 0; // Moderate issues",
    "100:   let p0 = 0; // Minor issues",
    "101: ",
    "102:   results.violations.forEach((violation) => {",
    "103:     violation.nodes.forEach((node) => console.log(node));",
    "104:   });",
    "105: ",
    "106:   // Count issues by impact",
    "107:   results.violations.forEach((violation) => {",
    "108:     switch (violation.impact) {",
    "109:       case 'critical':",
    "110:       case 'serious':",
    "111:         p2 += violation.nodes.length;",
    "112:         break;",
    "113:       case 'moderate':",
    "114:         p1 += violation.nodes.length;",
    "115:         break;",
    "116:       case 'minor':",
    "117:         p0 += violation.nodes.length;",
    "118:         break;",
    "119:     }",
    "120:   });",
    "121: ",
    "122:   // Calculate the raw score",
    "123:   const rawScore = (0.4 * p2 + 0.8 * p1 + p0) / (p1 + p2 + p0);",
    "124: ",
    "125:   // Optionally weight the score",
    "126:   const weightedScore = 500 + rawScore * 500.0;",
    "127:   console.log(`minor: ${p0} | minor: ${p1} | minor: ${p2}`);",
    "128:   console.log(`Raw score: ${rawScore} | Weighted score: ${weightedScore}`);",
    "129: ",
    "130:   const score = {",
    "131:     rawScore,",
    "132:     weightedScore,",
    "133:     serious: p2,",
    "134:     moderate: p1,",
    "135:     minor: p0,",
    "136:   };",
    "137: ",
    "138:   if (flag) {",
    "139:     await fs.writeFile(",
    "140:       'accessibility-results.json',",
    "141:       JSON.stringify(results, null, 2),",
    "142:       'utf8',",
    "143:     );",
    "144: ",
    "145:     await fs.writeFile(",
    "146:       'accessibility-score.json',",
    "147:       JSON.stringify(score, null, 2),",
    "148:       'utf-8',",
    "149:     );",
    "150:   }",
    "151: ",
    "152:   await browser.close();",
    "153: ",
    "154:   const accessibilityResult = { score, results };",
    "155: ",
    "156:   return accessibilityResult;",
    "157: };",
    "158: ",
    "159: // Export functions for use as a module",
    "160: // export { improveSemantics, improveHtmlSemantics, init, assessAccessibility };",
    "161: "
  ],
  "src/utils.test.ts": [
    "1: // import { add } from './utils.js';",
    "2: // import { test, expect } from 'vitest';",
    "3: ",
    "4: // test('add', () => {",
    "5: //   expect(add(1, 2)).toBe(3);",
    "6: // });",
    "7: "
  ],
  "src/utils.js": [
    "1: 'use strict';",
    "2: var __awaiter =",
    "3:   (this && this.__awaiter) ||",
    "4:   function (thisArg, _arguments, P, generator) {",
    "5:     function adopt(value) {",
    "6:       return value instanceof P",
    "7:         ? value",
    "8:         : new P(function (resolve) {",
    "9:             resolve(value);",
    "10:           });",
    "11:     }",
    "12:     return new (P || (P = Promise))(function (resolve, reject) {",
    "13:       function fulfilled(value) {",
    "14:         try {",
    "15:           step(generator.next(value));",
    "16:         } catch (e) {",
    "17:           reject(e);",
    "18:         }",
    "19:       }",
    "20:       function rejected(value) {",
    "21:         try {",
    "22:           step(generator['throw'](value));",
    "23:         } catch (e) {",
    "24:           reject(e);",
    "25:         }",
    "26:       }",
    "27:       function step(result) {",
    "28:         result.done",
    "29:           ? resolve(result.value)",
    "30:           : adopt(result.value).then(fulfilled, rejected);",
    "31:       }",
    "32:       step((generator = generator.apply(thisArg, _arguments || [])).next());",
    "33:     });",
    "34:   };",
    "35: var __generator =",
    "36:   (this && this.__generator) ||",
    "37:   function (thisArg, body) {",
    "38:     var _ = {",
    "39:         label: 0,",
    "40:         sent: function () {",
    "41:           if (t[0] & 1) throw t[1];",
    "42:           return t[1];",
    "43:         },",
    "44:         trys: [],",
    "45:         ops: [],",
    "46:       },",
    "47:       f,",
    "48:       y,",
    "49:       t,",
    "50:       g;",
    "51:     return (",
    "52:       (g = { next: verb(0), throw: verb(1), return: verb(2) }),",
    "53:       typeof Symbol === 'function' &&",
    "54:         (g[Symbol.iterator] = function () {",
    "55:           return this;",
    "56:         }),",
    "57:       g",
    "58:     );",
    "59:     function verb(n) {",
    "60:       return function (v) {",
    "61:         return step([n, v]);",
    "62:       };",
    "63:     }",
    "64:     function step(op) {",
    "65:       if (f) throw new TypeError('Generator is already executing.');",
    "66:       while ((g && ((g = 0), op[0] && (_ = 0)), _))",
    "67:         try {",
    "68:           if (",
    "69:             ((f = 1),",
    "70:             y &&",
    "71:               (t =",
    "72:                 op[0] & 2",
    "73:                   ? y['return']",
    "74:                   : op[0]",
    "75:                     ? y['throw'] || ((t = y['return']) && t.call(y), 0)",
    "76:                     : y.next) &&",
    "77:               !(t = t.call(y, op[1])).done)",
    "78:           )",
    "79:             return t;",
    "80:           if (((y = 0), t)) op = [op[0] & 2, t.value];",
    "81:           switch (op[0]) {",
    "82:             case 0:",
    "83:             case 1:",
    "84:               t = op;",
    "85:               break;",
    "86:             case 4:",
    "87:               _.label++;",
    "88:               return { value: op[1], done: false };",
    "89:             case 5:",
    "90:               _.label++;",
    "91:               y = op[1];",
    "92:               op = [0];",
    "93:               continue;",
    "94:             case 7:",
    "95:               op = _.ops.pop();",
    "96:               _.trys.pop();",
    "97:               continue;",
    "98:             default:",
    "99:               if (",
    "100:                 !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&",
    "101:                 (op[0] === 6 || op[0] === 2)",
    "102:               ) {",
    "103:                 _ = 0;",
    "104:                 continue;",
    "105:               }",
    "106:               if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {",
    "107:                 _.label = op[1];",
    "108:                 break;",
    "109:               }",
    "110:               if (op[0] === 6 && _.label < t[1]) {",
    "111:                 _.label = t[1];",
    "112:                 t = op;",
    "113:                 break;",
    "114:               }",
    "115:               if (t && _.label < t[2]) {",
    "116:                 _.label = t[2];",
    "117:                 _.ops.push(op);",
    "118:                 break;",
    "119:               }",
    "120:               if (t[2]) _.ops.pop();",
    "121:               _.trys.pop();",
    "122:               continue;",
    "123:           }",
    "124:           op = body.call(thisArg, _);",
    "125:         } catch (e) {",
    "126:           op = [6, e];",
    "127:           y = 0;",
    "128:         } finally {",
    "129:           f = t = 0;",
    "130:         }",
    "131:       if (op[0] & 5) throw op[1];",
    "132:       return { value: op[0] ? op[1] : void 0, done: true };",
    "133:     }",
    "134:   };",
    "135: Object.defineProperty(exports, '__esModule', { value: true });",
    "136: exports.getValue = exports.add = void 0;",
    "137: exports.improveSemantics = improveSemantics;",
    "138: var openai_1 = require('openai');",
    "139: var fs = require('fs/promises');",
    "140: var child_process_1 = require('child_process');",
    "141: var add = function (a, b) {",
    "142:   return a + b;",
    "143: };",
    "144: exports.add = add;",
    "145: var getValue = function (value) {",
    "146:   return console.log(value);",
    "147: };",
    "148: exports.getValue = getValue;",
    "149: function improveSemantics() {",
    "150:   return __awaiter(this, void 0, void 0, function () {",
    "151:     var improvedHtml, error_1;",
    "152:     return __generator(this, function (_a) {",
    "153:       switch (_a.label) {",
    "154:         case 0:",
    "155:           _a.trys.push([0, 2, , 3]);",
    "156:           return [",
    "157:             4 /*yield*/,",
    "158:             improveHtmlSemantics({",
    "159:               htmlFilePath: './index.html',",
    "160:               openAIApiKey: 'your-api-key-here',",
    "161:               openAIModel: 'gpt-4o-mini',",
    "162:               openVSCode: true,",
    "163:             }),",
    "164:           ];",
    "165:         case 1:",
    "166:           improvedHtml = _a.sent();",
    "167:           console.log('Improved HTML:', improvedHtml);",
    "168:           return [3 /*break*/, 3];",
    "169:         case 2:",
    "170:           error_1 = _a.sent();",
    "171:           console.error('Error improving HTML:', error_1);",
    "172:           return [3 /*break*/, 3];",
    "173:         case 3:",
    "174:           return [2 /*return*/];",
    "175:       }",
    "176:     });",
    "177:   });",
    "178: }",
    "179: function improveHtmlSemantics(_a) {",
    "180:   return __awaiter(this, arguments, void 0, function (_b) {",
    "181:     var client, htmlContent, prompt_1, completion, improvedHtml, error_2;",
    "182:     var htmlFilePath = _b.htmlFilePath,",
    "183:       openAIApiKey = _b.openAIApiKey,",
    "184:       _c = _b.openAIModel,",
    "185:       openAIModel = _c === void 0 ? 'gpt-4o-mini' : _c,",
    "186:       _d = _b.openVSCode,",
    "187:       openVSCode = _d === void 0 ? false : _d;",
    "188:     return __generator(this, function (_e) {",
    "189:       switch (_e.label) {",
    "190:         case 0:",
    "191:           client = new openai_1.OpenAI({ apiKey: openAIApiKey });",
    "192:           _e.label = 1;",
    "193:         case 1:",
    "194:           _e.trys.push([1, 5, , 6]);",
    "195:           return [4 /*yield*/, fs.readFile(htmlFilePath, 'utf8')];",
    "196:         case 2:",
    "197:           htmlContent = _e.sent();",
    "198:           prompt_1 =",
    "199:             'Please make the following HTML more semantic and accessible. Consider using header tags instead of just <p> or using <section>/<article> instead of <div> where appropriate. Do not response with any other words or content EXCEPT for the html code. Also do not include html at the start or at the end. This is extremely important. Here is the HTML content:\\n\\n'.concat(",
    "200:               htmlContent,",
    "201:             );",
    "202:           return [",
    "203:             4 /*yield*/,",
    "204:             client.chat.completions.create({",
    "205:               model: openAIModel,",
    "206:               messages: [",
    "207:                 {",
    "208:                   role: 'system',",
    "209:                   content:",
    "210:                     'You are a front-end developer that is an expert in semantic HTML. You are helping a colleague improve the semantic structure of their HTML code to make it more accessible. You are not allowed to change any content or words in the HTML code except for the HTML tags and the attributes of those tags. You can also add new tags or attributes where necessary.',",
    "211:                 },",
    "212:                 { role: 'user', content: prompt_1 },",
    "213:               ],",
    "214:             }),",
    "215:           ];",
    "216:         case 3:",
    "217:           completion = _e.sent();",
    "218:           improvedHtml = completion.choices[0].message.content || '';",
    "219:           return [",
    "220:             4 /*yield*/,",
    "221:             fs.writeFile(htmlFilePath, improvedHtml, 'utf8'),",
    "222:           ];",
    "223:         case 4:",
    "224:           _e.sent();",
    "225:           console.log(",
    "226:             'The file '.concat(htmlFilePath, ' has been updated successfully.'),",
    "227:           );",
    "228:           if (openVSCode) {",
    "229:             (0, child_process_1.exec)(",
    "230:               'git difftool '.concat(htmlFilePath),",
    "231:               function (error, stdout, stderr) {",
    "232:                 if (error) {",
    "233:                   console.log(",
    "234:                     'Failed to open VSCode with git difftool. Make sure git is installed and configured correctly.',",
    "235:                   );",
    "236:                   return;",
    "237:                 }",
    "238:                 if (stderr) {",
    "239:                   console.log('stderr: '.concat(stderr));",
    "240:                   return;",
    "241:                 }",
    "242:                 console.log(",
    "243:                   'Opened working tree changes for '.concat(",
    "244:                     htmlFilePath,",
    "245:                     ' in VSCode.',",
    "246:                   ),",
    "247:                 );",
    "248:               },",
    "249:             );",
    "250:           }",
    "251:           return [2 /*return*/, improvedHtml];",
    "252:         case 5:",
    "253:           error_2 = _e.sent();",
    "254:           console.error('An error occurred:', error_2);",
    "255:           throw error_2;",
    "256:         case 6:",
    "257:           return [2 /*return*/];",
    "258:       }",
    "259:     });",
    "260:   });",
    "261: }",
    "262: improveSemantics();",
    "263: "
  ],
  "src/index.ts": [
    "1: import { init } from '@/utils/init';",
    "2: import { check } from '@/utils/check';",
    "3: import { fixFile, fixRepo } from '@/utils/fix';",
    "4: ",
    "5: export { init, check, fixFile, fixRepo };",
    "6: "
  ],
  "src/index.html": [
    "1: <!doctype html>",
    "2: <html>",
    "3:   <head>",
    "4:     <title>My HTML Page</title>",
    "5:   </head>",
    "6:   <body>",
    "7:     <div>",
    "8:       <p>Welcome to my website!</p>",
    "9:       <p>This is the first div.</p>",
    "10:     </div>",
    "11: ",
    "12:     <div>",
    "13:       <p>About Me</p>",
    "14:       <p>I am a web developer.</p>",
    "15:     </div>",
    "16: ",
    "17:     <div>",
    "18:       <p>Contact Information</p>",
    "19:       <p>Email: example@example.com</p>",
    "20:       <p>Phone: 123-456-7890</p>",
    "21:     </div>",
    "22:   </body>",
    "23: </html>",
    "24: "
  ],
  "src/cli.ts": [
    "1: #!/usr/bin/env node",
    "2: import { Command } from 'commander';",
    "3: import inquirer from 'inquirer';",
    "4: import { init, check, fixFile, fixRepo } from './index';",
    "5: import * as dotenv from 'dotenv';",
    "6: ",
    "7: const program = new Command();",
    "8: dotenv.config();",
    "9: ",
    "10: program",
    "11:   .name('guidedog')",
    "12:   .description(",
    "13:     'An AI powered code library to assist web-developers create more accessible websites and applications.',",
    "14:   )",
    "15:   .version('1.0.0');",
    "16: ",
    "17: program",
    "18:   .command('init')",
    "19:   .description('Initialize the accessibility config for the repo')",
    "20:   .action(async () => {",
    "21:     console.log('Starting init...');",
    "22:     try {",
    "23:       let apiKey: string = process.env.OPENAI_API_KEY || '';",
    "24: ",
    "25:       if (apiKey) {",
    "26:         console.log('OpenAI API key found in environment variables');",
    "27: ",
    "28:         const useExistingKeyResponse = await inquirer.prompt({",
    "29:           type: 'confirm',",
    "30:           name: 'useExistingKey',",
    "31:           message: 'Do you want to use the existing API key?',",
    "32:           default: true,",
    "33:         });",
    "34: ",
    "35:         if (!useExistingKeyResponse.useExistingKey) {",
    "36:           apiKey = ''; // clear api key so it triggers the next input prompt",
    "37:         }",
    "38:       }",
    "39: ",
    "40:       if (!apiKey) {",
    "41:         console.log('OpenAI API key not found in environment variables');",
    "42:         const apiKeyResponse = await inquirer.prompt({",
    "43:           type: 'input',",
    "44:           name: 'apiKey',",
    "45:           message: 'Enter your OpenAI API key:',",
    "46:           validate: (input) => input.length > 0 || 'API key cannot be empty',",
    "47:         });",
    "48: ",
    "49:         apiKey = apiKeyResponse.apiKey;",
    "50:       }",
    "51: ",
    "52:       const answers = await inquirer.prompt({",
    "53:         type: 'list',",
    "54:         name: 'framework',",
    "55:         message: 'What framework are you using?',",
    "56:         choices: ['React', 'Angular', 'Vue', 'Other'],",
    "57:       });",
    "58: ",
    "59:       await init(apiKey, answers.framework);",
    "60:       console.log('✅ Init completed!');",
    "61:     } catch (error) {",
    "62:       program.error(`❌ Error during initialization: ${error}`);",
    "63:     }",
    "64:   });",
    "65: ",
    "66: //commented out cus errors -r",
    "67: ",
    "68: // program",
    "69: //   .command('check')",
    "70: //   .description('Check accessibility of your project')",
    "71: //   .option('--report', 'Generate a detailed accessibility report')",
    "72: //   .action((options) => {",
    "73: //     check(options.report);",
    "74: //   });",
    "75: ",
    "76: // TODO: Add option for fixFile",
    "77: program",
    "78:   .command('guide')",
    "79:   .description('Fix accessibility issues in a specific file')",
    "80:   .action(() => {",
    "81:     fixRepo();",
    "82:   });",
    "83: ",
    "84: program.parse(process.argv);",
    "85: "
  ],
  "src/utils/init.ts": [
    "1: import { runCodeScan } from '@/helpers/CodeBaseScan';",
    "2: import { CreateAssistant } from '@/helpers/ModelHandler';",
    "3: import { initConfig, saveAPIKey, createNewRun } from '@/helpers/config';",
    "4: import { createfileLineBreakdown } from '@/helpers/FileLineBreakdown';",
    "5: ",
    "6: // Start Generation Here",
    "7: async function init(apiKey: string, framework: string) {",
    "8:   try {",
    "9:     saveAPIKey(apiKey);",
    "10:     const contextFiles = await runCodeScan();",
    "11: ",
    "12:     const runPath = await createNewRun();",
    "13: ",
    "14:     const fileLineBreakdown = await createfileLineBreakdown(contextFiles, runPath);",
    "15: ",
    "16:     const response = await CreateAssistant(apiKey, fileLineBreakdown);",
    "17: ",
    "18:     const _config = {",
    "19:       framework: framework,",
    "20:       assistantId: '3',",
    "21:       contextId: response.contextVectorID,",
    "22:     };",
    "23: ",
    "24:     await initConfig(_config);",
    "25:   } catch (error) {",
    "26:     throw error;",
    "27:   }",
    "28: }",
    "29: ",
    "30: export { init };",
    "31: "
  ],
  "src/utils/fix.ts": [
    "1: import { SuggestRepoChanges } from '@/helpers/ModelHandler';",
    "2: import * as fs from 'fs/promises';",
    "3: import * as dotenv from 'dotenv';",
    "4: import path from 'path';",
    "5: ",
    "6: export async function fixFile(dir: string) {",
    "7:   console.log(`fix specific file at [${dir}]`);",
    "8: }",
    "9: ",
    "10: async function fixRepo() {",
    "11:   try {",
    "12:     dotenv.config();",
    "13:     const apiKey = process.env.OPENAI_API_KEY;",
    "14:     const directoryPath = path.join(process.cwd(), '.guidedog');",
    "15:     let configObj = await import(",
    "16:       path.join(directoryPath, 'guidedog.config.cjs')",
    "17:     );",
    "18: ",
    "19:     if (apiKey != null) {",
    "20:       const assistantId = configObj.default.assistantId;",
    "21:       const contextId = configObj.default.contextId;",
    "22: ",
    "23:       const suggestionList = await SuggestRepoChanges(",
    "24:         apiKey,",
    "25:         assistantId,",
    "26:         contextId,",
    "27:       );",
    "28: ",
    "29:       return suggestionList;",
    "30:     } else {",
    "31:       throw new Error('No API Key found');",
    "32:     }",
    "33:   } catch (error) {",
    "34:     console.log('Error getting suggestions for the Repo: ' + error);",
    "35:   }",
    "36: }",
    "37: ",
    "38: export { fixRepo };",
    "39: "
  ],
  "src/utils/check.ts": [
    "1: export async function check(flag: boolean) {",
    "2:   console.log(`check${flag ? ' --report' : ''}`);",
    "3: }",
    "4: "
  ],
  "src/helpers/readIgnore.ts": [
    "1: import fs from 'fs';",
    "2: import path from 'path';",
    "3: ",
    "4: export function readIgnore() {",
    "5:   const ignorePath = path.join(process.cwd(), '.guidedogignore');",
    "6: ",
    "7:   try {",
    "8:     const data = fs.readFileSync(ignorePath, 'utf-8');",
    "9: ",
    "10:     const ignorePatterns = data",
    "11:       .split('\\n')",
    "12:       .map((line) => line.trim())",
    "13:       .filter((line) => line && !line.startsWith('#')); // Filter out empty lines and comments",
    "14: ",
    "15:     return ignorePatterns;",
    "16:   } catch (error) {",
    "17:     return [];",
    "18:   }",
    "19: }",
    "20: "
  ],
  "src/helpers/config.ts": [
    "1: import { OpenAI } from 'openai';",
    "2: import * as fs from 'fs';",
    "3: import path from 'path';",
    "4: ",
    "5: interface IConfig {",
    "6:   framework?: string;",
    "7:   assistantId?: string;",
    "8:   contextId?: string;",
    "9:   rules?: any;",
    "10: }",
    "11: ",
    "12: export async function initConfig(_config: IConfig) {",
    "13:   const directoryPath = path.join(process.cwd(), '.guidedog');",
    "14:   const configPath = path.join(directoryPath, 'guidedog.config.cjs');",
    "15: ",
    "16:   try {",
    "17:     if (!fs.existsSync(directoryPath)) {",
    "18:       fs.mkdirSync(directoryPath);",
    "19:     }",
    "20: ",
    "21:     if (fs.existsSync(configPath)) {",
    "22:       let configObj = await import(configPath);",
    "23:       configObj = {",
    "24:         ...configObj,",
    "25:         framework: _config.framework,",
    "26:         assistantId: _config.assistantId,",
    "27:         contextId: _config.contextId,",
    "28:       };",
    "29:       fs.writeFileSync(",
    "30:         configPath,",
    "31:         `module.exports = ${JSON.stringify(configObj, null, 2)};`,",
    "32:       );",
    "33:     } else {",
    "34:       // Write the new config object to the file",
    "35:       fs.writeFileSync(",
    "36:         configPath,",
    "37:         `module.exports = ${JSON.stringify(_config, null, 2)};`,",
    "38:         { encoding: 'utf-8' },",
    "39:       );",
    "40:     }",
    "41:   } catch (error) {",
    "42:     throw error;",
    "43:   }",
    "44: }",
    "45: ",
    "46: export async function updateConfig(",
    "47:   assistant: OpenAI.Beta.Assistants.Assistant,",
    "48: ) {",
    "49:   // Read existing config or create a new one",
    "50:   let config: { assistantId: string } = { assistantId: '' }; // TODO: make this a proper config object",
    "51: ",
    "52:   try {",
    "53:     const directoryPath = path.join(process.cwd(), '.guidedog');",
    "54:     const configPath = path.join(directoryPath, 'guidedog.config.cjs');",
    "55:     const existingConfig = fs.readFileSync(configPath, {",
    "56:       encoding: 'utf8',",
    "57:     });",
    "58:     config = JSON.parse(existingConfig);",
    "59:     // Append assistantId to the config",
    "60:     config['assistantId'] = assistant.id;",
    "61: ",
    "62:     // Write the updated config back to the file",
    "63:     fs.writeFileSync(",
    "64:       directoryPath,",
    "65:       `module.exports = ${JSON.stringify(config, null, 2)};`,",
    "66:       'utf8',",
    "67:     );",
    "68:     console.log('Configuration saved to .guidedog/guidedog.config.cjs');",
    "69:   } catch (error) {",
    "70:     console.log('No existing config found, creating a new one.');",
    "71:   }",
    "72: }",
    "73: ",
    "74: export async function createNewRun() {",
    "75:   // .toJSON is an easy way to give us YYYY-MM-DD-${time} format to avoid using '/'s as that causes issues for path names",
    "76:   const todaysDate = new Date().toJSON();",
    "77: ",
    "78:   const newRunPath = path.join(process.cwd(), `.guidedog/runs/run-${todaysDate}`)",
    "79: ",
    "80:   try {",
    "81: ",
    "82:     if (!fs.existsSync(newRunPath)) {",
    "83:       fs.mkdirSync(newRunPath, { recursive: true });",
    "84:     } else {",
    "85:       console.log(\"Run path already exists for this exact time. Returning existing run path.\")",
    "86:     }",
    "87: ",
    "88:     return newRunPath;",
    "89:   } catch (error) {",
    "90:     throw error;",
    "91:   }",
    "92: ",
    "93: }",
    "94: ",
    "95: export async function saveAPIKey(apiKey: string) {",
    "96:   const envPath = path.join(process.cwd(), '.env');",
    "97:   const apiKeyEntry = `OPENAI_API_KEY=${apiKey}`;",
    "98: ",
    "99:   // Check if .env file exists",
    "100:   if (fs.existsSync(envPath)) {",
    "101:     // Append the API key if it exists",
    "102:     fs.appendFileSync(envPath, `\\n${apiKeyEntry}`, { encoding: 'utf8' });",
    "103:     console.log('API key appended to .env file.');",
    "104:   } else {",
    "105:     // Create a new .env file and add the API key",
    "106:     fs.writeFileSync(envPath, apiKeyEntry, { encoding: 'utf8' });",
    "107:     console.log('.env file created and API key added.');",
    "108:   }",
    "109: }",
    "110: "
  ],
  "src/helpers/ModelHandler.ts": [
    "1: import OpenAI from 'openai';",
    "2: import * as fs from 'fs';",
    "3: ",
    "4: export async function CreateAssistant(apiKey: string, htmlFile: string) {",
    "5:   console.log('Creating assistant \"GuideDog\"...');",
    "6:   try {",
    "7:     const client = new OpenAI({ apiKey });",
    "8: ",
    "9:     const contextVectorID = await CreateVectorStore(htmlFile, client);",
    "10: ",
    "11:     const assistant = await client.beta.assistants.create({",
    "12:       name: 'GuideDog',",
    "13:       instructions:",
    "14:         'You are an expert frontend developer that is tasked with helping me improve the accessibility of my frontend code.',",
    "15:       tools: [{ type: 'file_search' }],",
    "16:       tool_resources: {",
    "17:         file_search: {",
    "18:           vector_store_ids: [contextVectorID],",
    "19:         },",
    "20:       },",
    "21:       model: 'gpt-4o-mini',",
    "22:     });",
    "23: ",
    "24:     console.log('✅Created assistant \"GuideDog\"');",
    "25:     return { assistant, contextVectorID };",
    "26:   } catch (error) {",
    "27:     throw error;",
    "28:   }",
    "29: }",
    "30: ",
    "31: export async function SuggestRepoChanges(",
    "32:   apiKey: string,",
    "33:   assistantId: string,",
    "34:   contextId: string,",
    "35: ) {",
    "36:   const client = new OpenAI({ apiKey });",
    "37: ",
    "38:   // Prompt should be a string",
    "39:   const prompt: string = `",
    "40:   Please analyze the following HTML for accessibility and semantic improvements. ",
    "41:   Only return valid JSON with no extra text or code block delimiters or newline characters. ",
    "42: ",
    "43:   You will be provided with a file path to the JSON file. Each key in the json object is a file path. The value for each file path is an array of strings",
    "44:   where each string is a line of code from the file. ",
    "45: ",
    "46:   You need to output the following: ",
    "47:   ",
    "48:   The JSON should be an array of objects with the following fields:",
    "49:   - Filename (string)",
    "50:   - Suggestion line number (number)",
    "51:   - Type of accessibility issue (string)",
    "52:   - Suggested code improvement (string)",
    "53:   ",
    "54:   Example:",
    "55:   [",
    "56:     {",
    "57:       \"Filename\": \"index.html\",",
    "58:       \"suggestion line number\": 5,",
    "59:       \"type of accessibility issue\": \"Lack of semantic structure\",",
    "60:       \"suggested code improvement\": \"<header><h1>Welcome to my website!</h1></header>\"",
    "61:     }",
    "62:   ]",
    "63:   Make sure the response is valid JSON.",
    "64: `;",
    "65: ",
    "66:   const thread = await client.beta.threads.create({",
    "67:     messages: [",
    "68:       {",
    "69:         role: 'user',",
    "70:         content: prompt,",
    "71:       },",
    "72:     ],",
    "73:     tool_resources: {",
    "74:       file_search: {",
    "75:         vector_store_ids: [contextId],",
    "76:       },",
    "77:     },",
    "78:   });",
    "79: ",
    "80:   const run = await client.beta.threads.runs.createAndPoll(thread.id, {",
    "81:     assistant_id: assistantId,",
    "82:   });",
    "83: ",
    "84:   const messages = await client.beta.threads.messages.list(thread.id, {",
    "85:     run_id: run.id,",
    "86:   });",
    "87: ",
    "88:   //kinda strange to be converting obj -> json -> obj but for some reason the initial obj throws error when trying to access text field.",
    "89:   const lastMessage = JSON.stringify(",
    "90:     messages.data[messages.data.length - 1]?.content[0],",
    "91:   );",
    "92:   const jsonResponse = JSON.parse(lastMessage);",
    "93:   const suggestions = jsonResponse.text.value;",
    "94: ",
    "95:   console.log(suggestions);",
    "96:   return jsonResponse;",
    "97: }",
    "98: ",
    "99: async function CreateVectorStore(",
    "100:   htmlFile: string,",
    "101:   client: OpenAI,",
    "102: ): Promise<string> {",
    "103:   const fileStream = fs.createReadStream(htmlFile);",
    "104: ",
    "105:   let vectorStore = await client.beta.vectorStores.create({",
    "106:     name: 'Codebase Context',",
    "107:   });",
    "108: ",
    "109:   await client.beta.vectorStores.fileBatches.uploadAndPoll(vectorStore.id, {",
    "110:     files: [fileStream],",
    "111:   });",
    "112: ",
    "113:   return vectorStore.id;",
    "114: }",
    "115: "
  ],
  "src/helpers/FileLineBreakdown.ts": [
    "1: // src/helpers/createfileLineBreakdown.ts",
    "2: import path from 'path';",
    "3: import * as fs from 'fs';",
    "4: ",
    "5: export async function createfileLineBreakdown(",
    "6:   filePaths: string[],",
    "7:   runPath: string,",
    "8: ): Promise<string> {",
    "9:   console.log('Creating fileLineBreakdown file...');",
    "10:   const fileLineBreakdown: { [key: string]: string[] } = {}; // Initialize as an object",
    "11: ",
    "12:   try {",
    "13:     for (const filePath of filePaths) {",
    "14:       const content: string = await fs.promises.readFile(filePath, 'utf8'); // Read file as string",
    "15:       const code = content.split('\\n');",
    "16:       fileLineBreakdown[filePath] = code.map(",
    "17:         (line, index) => `${index + 1}: ${line}`,",
    "18:       );",
    "19:     }",
    "20: ",
    "21:     if (!fs.existsSync(runPath)) {",
    "22:       fs.mkdirSync(runPath, { recursive: true });",
    "23:     }",
    "24:     ",
    "25:     // Write the mega file to the src directory",
    "26:     const outputPath = path.join(runPath, 'fileLineBreakdown.json');",
    "27:     await fs.promises.writeFile(",
    "28:       outputPath,",
    "29:       JSON.stringify(fileLineBreakdown, null, 2),",
    "30:       'utf8',",
    "31:     );",
    "32: ",
    "33:     return outputPath;",
    "34:   } catch (error) {",
    "35:     throw error;",
    "36:   }",
    "37: }",
    "38: "
  ],
  "src/helpers/CodeBaseScan.ts": [
    "1: import { glob } from 'glob';",
    "2: import { readIgnore } from '@/helpers/readIgnore';",
    "3: ",
    "4: export async function runCodeScan(): Promise<string[]> {",
    "5:   console.log('Scanning...');",
    "6:   const _ignore = readIgnore();",
    "7:   try {",
    "8:     const patterns = [",
    "9:       `**/*.{js,jsx,ts,tsx,html,htm,xhtml,css,scss,less,vue,svelte}`,",
    "10:     ];",
    "11:     const filePaths = await glob(patterns, {",
    "12:       ignore: [",
    "13:         ..._ignore,",
    "14:         'node_modules/**',",
    "15:         '*.json',",
    "16:         '.next/**',",
    "17:         'dist/**',",
    "18:         'build/**',",
    "19:         'public/**',",
    "20:       ],",
    "21:     });",
    "22: ",
    "23:     console.log('✅Scanning completed');",
    "24:     return filePaths;",
    "25:   } catch (error) {",
    "26:     throw error;",
    "27:   }",
    "28: }",
    "29: "
  ]
}
